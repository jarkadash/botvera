import asyncio
import html

from aiogram.exceptions import TelegramAPIError, TelegramForbiddenError
from aiogram.fsm.storage.base import StorageKey
from dotenv import load_dotenv
from aiogram import Bot, Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from colorama import Fore, Style

from handlers.User.keyboard.replykeqyboard import user_stars_kb, start_menu
from logger import logger
from database.db import DataBase, redis_client
from handlers.User.Start import StarsOrder
from handlers.Worker.Start import active_timers
from config import *

db = DataBase()
load_dotenv()

chat_router = Router()


async def reset_state_after_timeout(state: FSMContext, user_id: int, bot):
    try:
        # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
        await asyncio.sleep(300)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        current_state = await state.get_state()
        if current_state == StarsOrder.stars_order.state:
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
            await state.clear()

            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await bot.send_message(
                user_id,
                "–í—Ä–µ–º—è –≤—ã—à–ª–æ. –û—Ü–µ–Ω–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.",
                reply_markup=start_menu
            )
    except asyncio.CancelledError:
        # –¢–∞–π–º–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª
        pass


async def unpin_specific_message(bot: Bot, chat_id: int, message_id: int):
    try:
        await bot.unpin_chat_message(
            chat_id=chat_id,
            message_id=message_id  # –£–∫–∞–∑—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å
        )
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ!")
    except TelegramAPIError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


@chat_router.message(Command(commands="stop_chat"))
async def stop_chat(message: Message, state: FSMContext):
    logger.info(Fore.BLUE + f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç –æ—Ç {message.from_user.id}" + Style.RESET_ALL)

    chat_with = await redis_client.get(f"chat:{message.from_user.id}")
    ticket = await redis_client.get(f"ticket:{message.from_user.id}")

    if chat_with:
        chat_with = int(chat_with)
        logger.debug(Fore.GREEN + f"–ù–∞–π–¥–µ–Ω —á–∞—Ç —Å {chat_with}" + Style.RESET_ALL)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¢–∏–∫–µ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
        result = await db.close_order(int(ticket))
        if result is False:
            logger.error(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¢–∏–∫–µ—Ç–∞ –≤ —á–∞—Ç–µ —Å {chat_with}" + Style.RESET_ALL)
            await message.answer("Ô∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¢–∏–∫–µ—Ç–∞.")
            return

        # –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ Redis
        other_storage_key = StorageKey(bot_id=message.bot.id, user_id=result['client_id'], chat_id=result['client_id'])

        # –°–æ–∑–¥–∞–µ–º FSMContext –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        other_state = FSMContext(storage=state.storage, key=other_storage_key)
        await other_state.update_data(order_id=int(ticket))

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞
        await other_state.set_state(StarsOrder.stars_order)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç
        asyncio.create_task(
            reset_state_after_timeout(other_state, result['client_id'], message.bot)
        )

        await redis_client.delete(f"ticket:{chat_with}")
        await redis_client.delete(f'chat:{chat_with}')
        await redis_client.delete(f"role:{chat_with}")
        await redis_client.delete(f"chat:{message.from_user.id}")
        await redis_client.delete(f"ticket:{message.from_user.id}")
        await redis_client.delete(f"role:{message.from_user.id}")

        logger.info(Fore.BLUE + f"–¢–∏–∫–µ—Ç ‚Ññ{ticket} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç." + Style.RESET_ALL)
        order = await db.get_orders_by_id(int(ticket))
        await message.bot.send_message(chat_id=result['support_id'],
                                       text=f"üö™ –¢–∏–∫–µ—Ç ‚Ññ{ticket} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç!\n"
                                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:@{order.client_name}\n"
                                            f"Id: {order.client_id}")

        try:
            await message.bot.send_message(
                chat_id=result['client_id'],
                text=f"üö™ –¢–∏–∫–µ—Ç ‚Ññ{ticket} –∑–∞–∫—Ä—ã—Ç! üéÆ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ.\n"
                     "–ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏. –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üî•"
            )

            await message.bot.send_message(
                chat_id=result['client_id'],
                text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n'
                    '–° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, –ª–∏–±–æ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10.',
                reply_markup=user_stars_kb
            )
        except TelegramForbiddenError as e:
            logger.error(Fore.RED + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞>: {e}" + Style.RESET_ALL)

        message_info = await db.get_all_message(int(ticket))
        if message_info:
            logger.info(Fore.BLUE + f"–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¢–∏–∫–µ—Ç–µ ‚Ññ{ticket}." + Style.RESET_ALL)
            messages_id = message_info.support_message_id

        if order:
            message_edit_text = (
                f"‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç!\n\n\n"
                f"üì© <b>–¢–∏–∫–µ—Ç</b> ‚Ññ{order.id}\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{order.client_name}\n"
                f"üÜî <b>ID:</b> {order.client_id}\n"
                f"<a href=\"https://t.me/{html.escape(order.client_name)}\">üîó 1.–¢–µ–ª–µ–≥—Ä–∞–º</a>\n"
                f"<a href=\"tg://user?id={order.client_id}\">üîó 2.–¢–µ–ª–µ–≥—Ä–∞–º</a>\n"
                f"üõ† <b>–£—Å–ª—É–≥–∞:</b> {html.escape(order.service_name)}\n"
                f"üÜî <b>Support_id:</b> {order.support_id}\n"
                f"üë®‚Äçüíª <b>Support_name:</b> @{html.escape(order.support_name)}\n"
                f"‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> {html.escape(order.status)}\n"
                f"‚è≥ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {order.created_at.strftime('%d-%m-%Y %H:%M')}\n\n"
                f"‚è≥ <b>–ü—Ä–∏–Ω—è—Ç–∞:</b> {order.accept_at.strftime('%d-%m-%Y %H:%M')}\n\n"
                f"‚è≥ <b>–ó–∞–∫—Ä—ã—Ç–∞:</b> {order.completed_at.strftime('%d-%m-%Y %H:%M')}\n\n"
                f"<a href=\"https://t.me/GBPSupport_bot\">–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞</a>"
            )
        await message.bot.edit_message_text(
            message_id=int(message_info.support_message_id),
            chat_id=GROUP_CHAT_ID,
            text=message_edit_text,
            parse_mode="HTML"
        )
        await unpin_specific_message(message.bot, GROUP_CHAT_ID, int(message_info.support_message_id))
    else:
        logger.warning(
            Fore.YELLOW + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ." + Style.RESET_ALL)
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ.")


@chat_router.message(lambda message: message.chat.type == 'private')
async def forward_message(message: Message):
    user_id = message.from_user.id
    chat_with = await redis_client.get(f"chat:{user_id}")

    if chat_with:
        chat_with = int(chat_with)
        role = await redis_client.get(f"role:{user_id}")
        if isinstance(role, bytes):
            role = role.decode("utf-8")
        ticket = await redis_client.get(f"ticket:{user_id}")

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–æ–ª—å
        logger.debug(f"[TIMER] –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {role}")

        # –¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—è–µ–º –∏ —Å—á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç
        if role == "user":
            if ticket and int(ticket) in active_timers:
                active_timers[int(ticket)].cancel()
                del active_timers[int(ticket)]
                logger.info(f"[TIMER] –û—Ç–º–µ–Ω—ë–Ω —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞ ‚Ññ{ticket} ‚Äî –∫–ª–∏–µ–Ω—Ç –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ.")
            await redis_client.incr(f"messages:{ticket}")
        else:
            logger.debug(f"[TIMER] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–æ–ª–∏ '{role}', —Ç–∞–π–º–µ—Ä –Ω–µ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è")

        group_chat_id = int(GROP_MG)
        group_thread_id = int(GROUP_CHAT_ID_MESSAGE)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        user = message.from_user
        sender_name = user.full_name
        username = f"(@{user.username})" if user.username else ""

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç/–æ–ø–∏—Å–∞–Ω–∏–µ –º–µ–¥–∏–∞
        original_text = message.text or message.caption

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å
        caption = (
            f'–¢–∏–∫–µ—Ç ‚Ññ{ticket} [{role}]\n'
            f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_name} {username}'
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –ø–æ–¥–ø–∏—Å—å
        if message.photo:
            content_type = "üì∑ –§–æ—Ç–æ"
        elif message.video:
            content_type = "üé• –í–∏–¥–µ–æ"
        elif message.document:
            content_type = "üìÑ –î–æ–∫—É–º–µ–Ω—Ç"
        else:
            content_type = "‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ"

        caption += f"\n–¢–∏–ø: {content_type}"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if original_text:
            caption += f"\n\n{original_text}"

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        log_prefix = f"Ticket ‚Ññ{ticket} [{role}] [{username}]"
        if message.photo:
            logger.info(f"{Fore.GREEN}{log_prefix}: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ{Style.RESET_ALL}")
        elif message.video:
            logger.info(f"{Fore.GREEN}{log_prefix}: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ{Style.RESET_ALL}")
        elif message.document:
            logger.info(f"{Fore.GREEN}{log_prefix}: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç{Style.RESET_ALL}")
        else:
            logger.info(f"{Fore.GREEN}{log_prefix}: {original_text}{Style.RESET_ALL}")

        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await message.bot.send_message(
            chat_id=group_chat_id,
            message_thread_id=group_thread_id,
            text=caption[:1024]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
        )

        try:
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞—Ç—É
            await message.bot.copy_message(
                chat_id=chat_with,
                from_chat_id=message.chat.id,
                message_id=message.message_id
            )
            logger.debug(Fore.GREEN + f"–ù–∞–π–¥–µ–Ω —á–∞—Ç —Å {chat_with}" + Style.RESET_ALL)
        except TelegramForbiddenError as e:
            logger.error(Fore.RED + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞>: {e}" + Style.RESET_ALL)
            await message.bot.send_message(text = "üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!, –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —Ç–∏–∫–µ—Ç!", chat_id=user_id)
    else:
        logger.warning(Fore.YELLOW + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ —á–∞—Ç–µ." + Style.RESET_ALL)
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start, –¥–∞–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!")
