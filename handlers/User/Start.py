from aiogram import Bot, Router, F
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from database.db import DataBase, redis_client
from colorama import Fore, Style
from logger import logger
from core.dictionary import *
from handlers.User.keyboard.replykeqyboard import get_start_menu, get_media_start_kb, get_user_stars_kb
from handlers.User.keyboard.InlineKeyboard import accounts_kb
from config import *
from commands import set_commands_admin
from core.i18n import normalize_lang
import os

db = DataBase()
start_router = Router()
TIMEOUT = 600

class StarsOrder(StatesGroup):
    stars_order = State()

def is_restricted_time() -> bool:
    now = datetime.now().time()
    return now.hour < 11 or now.hour >= 23

async def _get_lang(user_id: int) -> str:
    val = await redis_client.get(f"lang:{user_id}")
    if val and hasattr(val, "decode"):
        val = val.decode()
    return normalize_lang(val or "ru")

@start_router.message(Command(commands='start'), F.chat.type == "private")
async def start(message: Message, state: FSMContext, bot: Bot):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} id: {message.from_user.id} –í–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "start"' + Style.RESET_ALL)
    await state.clear()
    lang = await _get_lang(message.from_user.id)
    if is_restricted_time():
        if lang == "en":
            txt = "‚è≥ Good time of day!\n\nSupport works from 11:00 to 23:00 (MSK).\nWe are currently unavailable and response time is increased.\n\nPlease leave your request and we will reply during working hours.\n\nThank you for understanding üíô"
        else:
            txt = "‚è≥ –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 11:00 –¥–æ 23:00 (–ú–°–ö).\n–°–µ–π—á–∞—Å –º—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω–æ.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üíô"
        await message.answer(txt)
    await set_commands_admin(bot, message.from_user.id)
    username = message.from_user.username
    if username is None:
        if lang == "en":
            txt = ("‚ùå You don't have @username set.\n\n"
                   "To use this bot you must set @username in Telegram settings:\n\n"
                   "1Ô∏è‚É£ Open Telegram.\n"
                   "2Ô∏è‚É£ Go to Settings.\n"
                   "3Ô∏è‚É£ Tap Edit Profile.\n"
                   "4Ô∏è‚É£ Set a unique @username.\n\n"
                   "After that you can use the bot! üöÄ")
        else:
            txt = ("‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω @username.\n\n"
                   "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å @username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram:\n\n"
                   "1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ Telegram.\n"
                   "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª.\n"
                   "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª.\n"
                   "4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π @username.\n\n"
                   "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º! üöÄ")
        await message.answer(txt)
        return
    result = await db.get_user(message.from_user.id, username)
    if result == 'Banned':
        await message.delete()
        logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} id: {message.from_user.id} –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ' + Style.RESET_ALL)
        return
    elif result == 'admin':
        if lang == "en":
            txt = "Welcome, master"
        else:
            txt = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–æ–π —Ö–æ–∑—è–∏–Ω"
        await message.answer(txt, reply_markup=get_start_menu(lang))
    elif result == 'support':
        if lang == "en":
            txt = "Hi, mate! Shall we work?"
        else:
            txt = "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∂–∏—â–µ! –ü–æ—Ä–∞–±–æ—Ç–∞–µ–º?"
        await message.answer(text=txt)
    elif result == 'media':
        if lang == "en":
            txt = "Hi, our media!"
        else:
            txt = "–ü—Ä–∏–≤–µ—Ç, –Ω–∞—à –º–µ–¥–∏–∞!"
        await message.answer(txt, reply_markup=get_media_start_kb(lang))
    elif result is True:
        if lang == "en":
            txt = "Welcome to GameBreaker. Use the menu below."
            await message.answer(txt, reply_markup=get_start_menu(lang), parse_mode='HTML')
        else:
            await message.answer(start_hello_message, reply_markup=get_start_menu(lang), parse_mode='HTML')
    else:
        if lang == "en":
            txt = "Error, please try later"
        else:
            txt = "–û—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        await message.answer(txt)

@start_router.message(F.text.in_({'üìã –ú–µ–Ω—é', 'üìã Menu'}))
async def open_menu(message: Message, state: FSMContext):
    lang = await _get_lang(message.from_user.id)
    result = await db.get_banned_users(message.from_user.id)
    if result is True:
        await message.delete()
        return
    username = message.from_user.username
    if username is None:
        if lang == "en":
            txt = ("‚ùå You don't have @username set.\n\n"
                   "To use this bot you must set @username in Telegram settings:\n\n"
                   "1Ô∏è‚É£ Open Telegram.\n"
                   "2Ô∏è‚É£ Go to Settings.\n"
                   "3Ô∏è‚É£ Tap Edit Profile.\n"
                   "4Ô∏è‚É£ Set a unique @username.\n\n"
                   "After that you can use the bot! üöÄ")
        else:
            txt = ("‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω @username.\n\n"
                   "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å @username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram:\n\n"
                   "1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ Telegram.\n"
                   "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª.\n"
                   "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª.\n"
                   "4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π @username.\n\n"
                   "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º! üöÄ")
        await message.answer(txt)
        return
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} id: {message.from_user.id} –í–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "–ú–µ–Ω—é"' + Style.RESET_ALL)
    services_all = await db.get_services()
    rows = [[InlineKeyboardButton(text=s.service_name, callback_data=f"service_{s.id}")] for s in services_all]
    if lang == "en":
        pri = "üöÄ Priority support"
        ask = "Choose the service you need:"
    else:
        pri = "üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
        ask = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º —É—Å–ª—É–≥—É:"
    rows.append([InlineKeyboardButton(text=pri, callback_data="priority_support")])
    keyboard_buttons = InlineKeyboardMarkup(inline_keyboard=rows)
    await message.answer(ask, reply_markup=keyboard_buttons)

@start_router.callback_query(F.data == "priority_support")
async def priority_support(call: CallbackQuery):
    lang = await _get_lang(call.from_user.id)
    if lang == "en":
        text = ("üöÄ <b>Priority Support</b>\n\n"
                "We have expanded priority capabilities and strengthened the support team to reduce waiting time at any hours.\n\n"
                "üí∞ <b>Price:</b> $20 / month\n\n"
                "üéÅ <b>What you get:</b>\n"
                "‚Ä¢ ‚è±Ô∏è <b>Service period:</b> 30 calendar days\n"
                "‚Ä¢ ü™ô <b>Max loyalty bonus:</b> +10% to the e-mail linked to your account on the site\n"
                "‚Ä¢ ‚≠ê <b>Chat tag:</b> ‚ÄúSponsor‚Äù\n"
                "‚Ä¢ üë• <b>Enhanced support line:</b> more agents for faster replies\n\n"
                "‚ÑπÔ∏è These steps develop the project, increase the agents‚Äô payroll and fund further R&D.\n\n"
                "Press ‚ÄúPay‚Äù to enable priority now.")
        pay = "üí≥ Pay"
        back = "‚¨ÖÔ∏è Back"
    else:
        text = ("üöÄ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
                "–ú—ã —Ä–∞—Å—à–∏—Ä–∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ —É—Å–∏–ª–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –ª—é–±—ã–µ —á–∞—Å—ã.\n\n"
                "üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 20$ / –º–µ—Å—è—Ü\n\n"
                "üéÅ <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:</b>\n"
                "‚Ä¢ ‚è±Ô∏è <b>–°—Ä–æ–∫ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥:</b> 30 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π\n"
                "‚Ä¢ ü™ô <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:</b> +10% –Ω–∞ e-mail, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –∞–∫–∫–∞—É–Ω—Ç—É –Ω–∞ —Å–∞–π—Ç–µ\n"
                "‚Ä¢ ‚≠ê <b>–¢–µ–≥ –≤ —á–∞—Ç–µ:</b> ¬´–°–ø–æ–Ω—Å–æ—Ä¬ª\n"
                "‚Ä¢ üë• <b>–£—Å–∏–ª–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b> –±–æ–ª—å—à–µ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n\n"
                "‚ÑπÔ∏è –≠—Ç–∏ —à–∞–≥–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ñ–æ–Ω–¥–∞ –æ–ø–ª–∞—Ç—ã —Ç—Ä—É–¥–∞ –∞–≥–µ–Ω—Ç–æ–≤ –∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–∂–µ —Å–µ–π—á–∞—Å.")
        pay = "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å"
        back = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=pay, url="https://oplata.info/asp2/pay_wm.asp?id_d=5423227&lang=ru-RU")],
            [InlineKeyboardButton(text=back, callback_data="back_to_menu")]
        ]
    )
    try:
        await call.message.delete()
    except Exception:
        pass
    base_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.abspath(os.path.join(base_dir, "../../"))
    image_path = os.path.join(project_root, "IMG_20250916_172720_485.png")
    await call.bot.send_photo(
        chat_id=call.from_user.id,
        photo=FSInputFile(image_path),
        caption=text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@start_router.callback_query(F.data == "back_to_menu")
async def back_to_menu(call: CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception:
        pass
    await open_menu(call.message, state)

@start_router.message(F.text.in_({'üÜò –ü–æ–º–æ—â—å', 'üÜò Help'}))
async def help(message: Message):
    lang = await _get_lang(message.from_user.id)
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} id: {message.from_user.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–º–æ—â–∏' + Style.RESET_ALL)
    if lang == "en":
        txt = ("You are already in our support bot.\n"
               "Do you want another virtual meeting with yourself? ü§®\n"
               "Choose a service from the menu.\n\n"
               "Hint:\n"
               "/start ‚Äî restart the bot\n"
               "/stop_chat ‚Äî stop dialog with support\n")
    else:
        txt = ("–¢—ã –∏ —Ç–∞–∫ —É–∂–µ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ-–ø–æ–¥–¥–µ—Ä–∂–∫–µ, –¥—Ä—É–∂–∏—â–µ!\n"
               "–ß—Ç–æ, —Ö–æ—á–µ—à—å —É—Å—Ç—Ä–æ–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –≤—Å—Ç—Ä–µ—á—É —Å —Å–∞–º–∏–º —Å–æ–±–æ–π? ü§® \n"
               "üòà –í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É –∏–∑ –º–µ–Ω—é –∏ –Ω–µ –Ω–∞–∂–∏–º–∞–π –±–æ–ª—å—à–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏ üòéüòú\n\n"
               "–ü–æ–¥—Å–∫–∞–∑–∫–∞:\n"
               "/start - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞\n"
               "/stop_chat - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å —Å–∞–ø–æ—Ä—Ç–æ–º\n")
    await message.answer(txt, parse_mode='HTML')

@start_router.message(F.text.in_({'üì© –ñ–∞–ª–æ–±–∞', 'üì© Complaint'}))
async def help(message: Message):
    lang = await _get_lang(message.from_user.id)
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} id: {message.from_user.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–º–æ—â–∏' + Style.RESET_ALL)
    if lang == "en":
        txt = ("Complain here <a href=\"https://telefon-doveria.ru/teenagers/\">BOT ADMINISTRATION</a> ü§®\n"
               "Choose a service from the menu.")
    else:
        txt = ("–¢—ã —Å–æ–≤—Å–µ–º —É–∂–µ?\n"
               "<a href=\"https://telefon-doveria.ru/teenagers/\">–ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–Ø –ë–û–¢–ê</a> ü§®\n"
               "–ê –∑–¥–µ—Å—å –∑–∞—Ö–æ–¥–∏ –Ω–µ –±–æ–π—Å—è, –≤—ã—Ö–æ–¥–∏ –Ω–µ –ø–ª–∞—á—å!\n\n"
               "üòà –í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É –∏–∑ –º–µ–Ω—é –∏ –Ω–µ –Ω–∞–∂–∏–º–∞–π –±–æ–ª—å—à–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∂–∞–ª–æ–±–∞, –ø–∞—Ü–∞–Ω—ã –Ω–µ –∂–∞–ª—É—é—Ç—Å—èüòéüòú")
    await message.answer(txt, parse_mode='HTML', disable_web_page_preview=True)

pinned_messages = {}

async def pin_message(bot: Bot, chat_id: int, message_id: int):
    try:
        await bot.pin_chat_message(chat_id=chat_id, message_id=message_id, disable_notification=True)
        pinned_messages[chat_id] = message_id
    except TelegramAPIError:
        pass

@start_router.callback_query(F.data.startswith('service_'))
async def callback_service(call: CallbackQuery, state: FSMContext):
    try:
        lang = await _get_lang(call.from_user.id)
        result = await db.get_banned_users(call.from_user.id)
        if result is True:
            await call.message.delete()
            return
        key = f"ticket_timeout:{call.from_user.id}"
        if await redis_client.exists(key):
            remaining = await redis_client.ttl(key)
            await call.message.delete()
            if lang == "en":
                txt = f"‚è≥ You have already sent a request, please wait:\n{remaining // 60} minutes {remaining % 60} seconds"
            else:
                txt = f"‚è≥ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ:\n{remaining // 60} –º–∏–Ω—É—Ç {remaining % 60} —Å–µ–∫—É–Ω–¥"
            await call.message.answer(txt)
            return
        if is_restricted_time():
            if lang == "en":
                txt = "‚è≥ Good time of day!\n\nSupport works from 11:00 to 23:00 (MSK).\nWe are currently unavailable and response time is increased.\n\nPlease leave your request and we will reply during working hours.\n\nThank you for understanding üíô"
            else:
                txt = "‚è≥ –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 11:00 –¥–æ 23:00 (–ú–°–ö).\n–°–µ–π—á–∞—Å –º—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω–æ.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üíô"
            await call.message.answer(txt)
        service_id = int(call.data.split('_')[1])
        user_id = call.from_user.id
        services_all = await db.get_services()
        service_obj = next((s for s in services_all if s.id == service_id), None)
        if service_obj and service_obj.service_name == '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å / Technical Support':
            cnt = await db.count_user_service_requests_today(user_id, service_obj.service_name)
            if cnt >= 3:
                if lang == "en":
                    txt = "You have already sent 3 requests to technical support today. A new request will be available tomorrow."
                else:
                    txt = "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 3 –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–µ —Å—É—Ç–∫–∏. –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –∑–∞–≤—Ç—Ä–∞."
                await call.message.answer(txt)
                return
        add_order = await db.add_orders(service_id, user_id)
        if add_order == 'Active-Ticket':
            if lang == "en":
                txt = "You already have an active ticket"
            else:
                txt = "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç"
            await call.message.answer(txt)
            return
        if lang == "en":
            message_send_user = (
               f"üì© Your Ticket #{add_order['id']}\n"
               f"üõ† Service: {add_order['service_name']}\n"
               f"‚è≥ Created: {add_order['created_at']}\n\n"
               f"üí¨ Please wait for a support agent to reply.\n"
               f"After your ticket is accepted, describe your problem and provide the required information.\n\n"
               f"‚è±Ô∏è Average support response time:\n"
               f"‚Ä¢ Up to 60 minutes in prime-time\n"
               f"‚Ä¢ Up to 30 minutes at other times\n\n"
               f"üöÄ For priority support\n"
               f"contact Admin: @st3lland"
            )
            cancel_txt = "üóë Cancel"
            choose_type = "Choose account type"
            buy_now = "üõí Buy now"
            back_txt = "‚¨ÖÔ∏è Back"
        else:
            message_send_user = (
               f"üì© –í–∞—à –¢–∏–∫–µ—Ç ‚Ññ{add_order['id']}\n"
               f"üõ† –£—Å–ª—É–≥–∞: {add_order['service_name']}\n"
               f"‚è≥ –°–æ–∑–¥–∞–Ω–∞: {add_order['created_at']}\n\n"
               f"üí¨ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
               f"–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –í–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ç—Ä–µ–±—É–µ–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
               f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n"
               f"‚Ä¢ –î–æ 60 –º–∏–Ω—É—Ç –≤ –ø—Ä–∞–π–º-—Ç–∞–π–º\n"
               f"‚Ä¢ –î–æ 30 –º–∏–Ω—É—Ç –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è\n\n"
               f"üöÄ –ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É,\n"
               f"–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @st3lland"
            )
            cancel_txt = "üóë –û—Ç–º–µ–Ω–∏—Ç—å"
            choose_type = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞"
            buy_now = "üõí –ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å"
            back_txt = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        keyboard_client = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=cancel_txt, callback_data=f"remove_order:{add_order['id']}")]
            ]
        )
        try:
            await call.message.delete()
        except Exception:
            pass
        base_dir = os.path.dirname(os.path.abspath(__file__))
        project_root = os.path.abspath(os.path.join(base_dir, "../../"))
        image_path = os.path.join(project_root, "IMG_20250916_172720_485.png")
        user_message = await call.bot.send_photo(
            chat_id=call.from_user.id,
            photo=FSInputFile(image_path),
            caption=message_send_user,
            parse_mode="HTML",
            reply_markup=keyboard_client
        )
        excluded_usernames = ['jarkadash', 'afnskwb', 'Voldemort_1337', 'st3lland', 'MrMikita', 'GB_Support_Team']
        users = await db.get_user_role_id()
        if add_order['service_name'] == '–ü–æ–ª—É—á–∏—Ç—å –ö–ª—é—á / Get a key':
            admins = [user for user in users if user.role_id == 1 and user.username not in excluded_usernames]
            support_mentions = ", ".join([f"@{admin.username}" for admin in admins])
            tread_id = CHAT_ID_TIKETS_ADMIN
        else:
            supports = [user for user in users if user.role_id in [1, 2] and user.username not in excluded_usernames]
            support_mentions = ", ".join([f"@{support.username}" for support in supports])
            tread_id = GROUP_CHAT_ID_TIKETS_SUPPORT
        logger.info(Fore.BLUE + f'{support_mentions}' + Style.RESET_ALL)
        message_send_support = (
            f"üì© <b>–¢–∏–∫–µ—Ç</b> ‚Ññ{add_order['id']}\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{add_order['client_name']}\n"
            f"üÜî <b>ID:</b> {add_order['client_id']}\n"
            f"<a href='https://t.me/{add_order['client_name']}'>üîó 1.–¢–µ–ª–µ–≥—Ä–∞–º</a>\n"
            f"<a href='tg://user?id={add_order['client_id']}'>üîó 2.–¢–µ–ª–µ–≥—Ä–∞–º</a>\n"
            f"üõ† <b>–£—Å–ª—É–≥–∞:</b> {add_order['service_name']}\n"
            f"‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> <i>–ù–æ–≤—ã–π</i>\n"
            f"‚è≥ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {add_order['created_at']}\n\n"
            f"{support_mentions}\n"
            f"‚ö° <b>–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–Ω—è—Ç—å', —á—Ç–æ–±—ã –≤–∑—è—Ç—å –¢–∏–∫–µ—Ç –≤ —Ä–∞–±–æ—Ç—É.</b>"
        )
        keyboard_admin = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –¢–∏–∫–µ—Ç", callback_data=f"accept_order:{add_order['id']}")],
                [InlineKeyboardButton(text="üóë –û—Ç–∫–ª–æ–Ω–∏—Ç—å –¢–∏–∫–µ—Ç", callback_data=f"cancel_order:{add_order['id']}")]
            ]
        )
        support_message = await call.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=message_send_support,
            message_thread_id=tread_id,
            reply_markup=keyboard_admin,
            parse_mode="HTML"
        )
        await db.add_messages_history(chat_id=user_message.chat.id, support_message_id=support_message.message_id, client_message_id=user_message.message_id, order_id=add_order['id'])
        await pin_message(call.bot, GROUP_CHAT_ID, support_message.message_id)
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã "service_": {e}')
        await call.message.answer('–û—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')

async def unpin_specific_message(bot: Bot, chat_id: int, message_id: int):
    try:
        await bot.unpin_chat_message(chat_id=chat_id, message_id=message_id)
    except TelegramAPIError:
        pass

@start_router.callback_query(F.data.startswith('remove_order:'))
async def remove_order(call: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        lang = await _get_lang(call.from_user.id)
        logger.info(f'üì¢ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.username} (ID: {call.from_user.id})')
        order_id = int(call.data.split(':')[1])
        logger.info(f'üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ ‚Ññ{order_id}...')
        await redis_client.setex(f"ticket_timeout:{call.from_user.id}", TIMEOUT, "1")
        result = await db.remove_ticket_user(order_id)
        if result is False:
            if lang == "en":
                txt = "Error, try later"
            else:
                txt = "–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            await call.message.answer(txt)
            return
        elif result == '–ù–µ –Ω–æ–≤—ã–π':
            if lang == "en":
                txt = "You cannot cancel your ticket if it has already been accepted or closed"
            else:
                txt = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Ç–∏–∫–µ—Ç, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –ø—Ä–∏–Ω—è—Ç –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç"
            try:
                await call.message.edit_caption(txt)
            except Exception:
                try:
                    await call.message.edit_text(txt)
                except Exception:
                    await call.answer(txt, show_alert=True)
            return
        logger.info(f'‚úÖ –¢–∏–∫–µ—Ç ‚Ññ{result["order_id"]} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {result["client_name"]} (ID: {result["client_id"]})')
        minutes = int(TIMEOUT / 60)
        if lang == "en":
            message_send_user = (
                f"üì© Your Ticket #{result['order_id']}\n"
                f"üõ† Service: {result['service_name']}\n"
                f"‚ùå <b>Canceled</b>\n\n"
                f"‚ö†Ô∏è You can create a new ticket only after {minutes} minutes!"
            )
        else:
            message_send_user = (
                f"üì© –í–∞—à –¢–∏–∫–µ—Ç ‚Ññ{result['order_id']}\n"
                f"üõ† –£—Å–ª—É–≥–∞: {result['service_name']}\n"
                f"‚ùå <b>–û—Ç–º–µ–Ω–µ–Ω</b>\n\n"
                f"‚ö†Ô∏è –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç, —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ {minutes} –º–∏–Ω—É—Ç!"
            )
        message_send_support = (
            f"üì© <b>–¢–∏–∫–µ—Ç</b> ‚Ññ{result['order_id']}\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{result['client_name']}\n"
            f"üÜî <b>ID:</b> {result['client_id']}\n"
            f"<a href='https://t.me/{result['client_name']}'>üîó 1.–¢–µ–ª–µ–≥—Ä–∞–º</a>\n"
            f"<a href='tg://user?id={result['client_id']}'>üîó 2.–¢–µ–ª–µ–≥—Ä–∞–º</a>\n"
            f"üõ† <b>–£—Å–ª—É–≥–∞:</b> {result['service_name']}\n"
            f"‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> <i>–û—Ç–º–µ–Ω–µ–Ω</i>\n"
            f"‚è≥ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {result['created_at']}\n\n"
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Ç–∏–∫–µ—Ç"
        )
        await call.bot.edit_message_text(
            message_id=result['support_message_id'],
            chat_id=GROUP_CHAT_ID,
            text=message_send_support,
            parse_mode="HTML"
        )
        try:
            await call.bot.edit_message_caption(
                message_id=result['client_message_id'],
                chat_id=call.from_user.id,
                caption=message_send_user,
                parse_mode="HTML"
            )
        except Exception:
            await call.bot.edit_message_text(
                message_id=result['client_message_id'],
                chat_id=call.from_user.id,
                text=message_send_user,
                parse_mode="HTML"
            )
        await unpin_specific_message(call.bot, GROUP_CHAT_ID, int(result['support_message_id']))
    except Exception as e:
        logger.error(f'üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: {e}', exc_info=True)
        if await _get_lang(call.from_user.id) == "en":
            await call.message.answer('An error occurred, try later.')
        else:
            await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

@start_router.message(StarsOrder.stars_order)
async def star_worker(message: Message, state: FSMContext):
    lang = await _get_lang(message.from_user.id)
    data = await state.get_data()
    timeout_task = data.get('timeout_task')
    if timeout_task:
        timeout_task.cancel()
    logger.info(Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –¢–∏–∫–µ—Ç –Ω–∞ {message.text.strip()} " + Style.RESET_ALL)
    reg_data = await state.get_data()
    try:
        stars = float(message.text.strip())
    except ValueError:
        if lang == "en":
            txt = "Please enter a number from 1 to 10"
        else:
            txt = "–î–ª—è –æ—Ü–µ–Ω–∫–∏ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10"
        await message.answer(txt)
        return
    if not (1 <= stars <= 10):
        if lang == "en":
            txt = "The score must be from 1 to 10"
        else:
            txt = "–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 10"
        await message.answer(txt)
        return
    result = await db.stars_order_update(int(reg_data.get('order_id')), stars)
    if result is True:
        if lang == "en":
            txt = f"Thank you for your rating! {stars}"
        else:
            txt = f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ—Ü–µ–Ω–∫—É! {stars}"
        await message.answer(txt, reply_markup=get_start_menu(lang))
    else:
        if lang == "en":
            txt = "Rating error. Try later."
        else:
            txt = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await message.answer(txt)
        logger.error(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –¢–∏–∫–µ—Ç–∞: {result}" + Style.RESET_ALL)
        return
    await state.clear()

@start_router.message(F.text.in_({'–ê–∫–∫–∞—É–Ω—Ç—ã RUST', 'RUST Accounts'}))
async def start_accounts(message: Message):
    lang = await _get_lang(message.from_user.id)
    logger.info(Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} (ID: {message.from_user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É '–ê–∫–∫–∞—É–Ω—Ç—ã RUST'" + Style.RESET_ALL)
    if lang == "en":
        txt = "Choose account type"
    else:
        txt = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞"
    await message.answer(txt, reply_markup=accounts_kb(lang))

@start_router.callback_query(F.data.startswith('zero_accounts'))
async def zero_accounts(call: CallbackQuery):
    lang = await _get_lang(call.from_user.id)
    logger.info(Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} (ID: {call.from_user.id}) –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –ù—É–ª–µ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç" + Style.RESET_ALL)
    if lang == "en":
        message_text = (
            f"<b>üéÆ Rust account</b> with random hours <b>üïí 0‚Äì100</b>\n\n"
            f"<b>‚ùóÔ∏è Important:</b>\n"
            f"<u>Login:password is provided</u>\n"
            f"‚õîÔ∏è It is <u>forbidden to change registration data</u> "
            f"(<b>password/email/phone</b>) ‚Äî this will lead to <b>permanent ban</b> "
            f"without exchange or refund üîê\n\n"
            f"‚úÖ <b>Allowed to change:</b>\n"
            f"‚Ä¢ üìù Profile\n"
            f"‚Ä¢ üì∏ Photo\n"
            f"‚Ä¢ üî§ Name\n\n"
            f"<b>‚öôÔ∏è Required:</b>\n"
            f"üö´ In settings <b>DISABLE</b> Remote play\n"
            f"üíµ Price: 800‚ÇΩ"
        )
        buy_now = "üõí Buy now"
        back = "‚¨ÖÔ∏è Back"
    else:
        message_text = (
            f"<b>üéÆ –†–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç</b> —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ —á–∞—Å–∞–º–∏ <b>üïí –æ—Ç 0 –¥–æ 100</b>\n\n"
            f"<b>‚ùóÔ∏è –í–ê–ñ–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï:</b>\n"
            f"<u>–í—ã–¥–∞–µ—Ç—Å—è –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å</u>\n"
            f"‚õîÔ∏è –ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ <u>–∑–∞–ø—Ä–µ—â–µ–Ω–æ –º–µ–Ω—è—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</u> "
            f"(<b>–ø–∞—Ä–æ–ª—å/–ø–æ—á—Ç—É/—Ç–µ–ª–µ—Ñ–æ–Ω</b>) ‚Äî —ç—Ç–æ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ <b>–ø–æ–ª–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ</b> "
            f"–∞–∫–∫–∞—É–Ω—Ç–∞ <u>–±–µ–∑ –æ–±–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞</u> üîê\n\n"
            f"‚úÖ <b>–†–∞–∑—Ä–µ—à–µ–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å:</b>\n"
            f"‚Ä¢ üìù –ü—Ä–æ—Ñ–∏–ª—å\n"
            f"‚Ä¢ üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n"
            f"‚Ä¢ üî§ –ò–º—è\n\n"
            f"<b>‚öôÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ:</b>\n"
            f"üö´ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö <b>–û–¢–ö–õ–Æ–ß–ò–¢–¨</b> Remote play\n"
            f"üíµ –¶–µ–Ω–∞: 800‚ÇΩ"
        )
        buy_now = "üõí –ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å"
        back = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=buy_now, url='https://www.digiseller.market/asp2/pay_wm.asp?id_d=5075738&lang=ru-RU')],
            [InlineKeyboardButton(text=back, callback_data='accounts_back')]
        ]
    )
    await call.message.edit_text(message_text, parse_mode="HTML", reply_markup=keyboard)

@start_router.callback_query(F.data.startswith('active_accounts'))
async def active_accounts(call: CallbackQuery, bot: Bot):
    lang = await _get_lang(call.from_user.id)
    logger.info(Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} (ID: {call.from_user.id}) –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç" + Style.RESET_ALL)
    image1 = "media/image1.jpg"
    message_text_en = (
        f"<b>üéÆ Rust account</b> with <b>üïí 1500+ hours + Twitch items</b>\n\n"
        f"<b>‚ùóÔ∏è Important:</b>\n"
        f"<u>Login:password is provided, 3 days warranty, email is given after warranty period of 72 hours</u>\n"
        f"‚õîÔ∏è Before the warranty ends it is <u>forbidden to change registration data</u>"
        f"(<b>password/email/phone</b>) ‚Äî this will lead to <b>permanent ban</b> "
        f"without exchange or refund üîê\n\n"
        f"‚úÖ <b>Allowed to change:</b>\n"
        f"‚Ä¢ üìù Profile\n"
        f"‚Ä¢ üì∏ Photo\n"
        f"‚Ä¢ üî§ Name\n\n"
        f"<b>‚öôÔ∏è Required:</b>\n"
        f"üö´ In settings <b>DISABLE</b> Remote play\n"
        f"üíµ Price: 3000‚ÇΩ"
    )
    message_text_ru = (
        f"<b>üéÆ –†–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç</b> —Å —á–∞—Å–∞–º–∏ <b>üïí –æ—Ç 1500 + —Ç–≤–∏—á –ø—Ä–µ–¥–º–µ—Ç—ã</b>\n\n"
        f"<b>‚ùóÔ∏è –í–ê–ñ–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï:</b>\n"
        f"<u>–í—ã–¥–∞–µ—Ç—Å—è –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å, 3 –¥–Ω—è –≥–∞—Ä–∞–Ω—Ç–∏–∏, –ø–æ—á—Ç–∞ –æ—Ç–¥–∞–µ—Ç—Å—è - –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å—Ä–æ–∫–æ–º –≤ 72 —á–∞—Å–∞</u>\n"
        f"‚õîÔ∏è –î–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ <u>–∑–∞–ø—Ä–µ—â–µ–Ω–æ –º–µ–Ω—è—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</u>"
        f"(<b>–ø–∞—Ä–æ–ª—å/–ø–æ—á—Ç—É/—Ç–µ–ª–µ—Ñ–æ–Ω</b>) ‚Äî —ç—Ç–æ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ <b>–ø–æ–ª–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ</b> "
        f"–∞–∫–∫–∞—É–Ω—Ç–∞ <u>–±–µ–∑ –æ–±–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞</u> üîê\n\n"
        f"‚úÖ <b>–†–∞–∑—Ä–µ—à–µ–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å:</b>\n"
        f"‚Ä¢ üìù –ü—Ä–æ—Ñ–∏–ª—å\n"
        f"‚Ä¢ üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n"
        f"‚Ä¢ üî§ –ò–º—è\n\n"
        f"<b>‚öôÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ:</b>\n"
        f"üö´ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö <b>–û–¢–ö–õ–Æ–ß–ò–¢–¨</b> Remote play\n"
        f"üíµ –¶–µ–Ω–∞: 3000‚ÇΩ"
    )
    if lang == "en":
        message_text = message_text_en
        buy_now = "üõí Buy now"
        back = "‚¨ÖÔ∏è Back"
    else:
        message_text = message_text_ru
        buy_now = "üõí –ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å"
        back = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=buy_now, url='https://www.digiseller.market/asp2/pay_wm.asp?id_d=5075744&lang=ru-RU')],
            [InlineKeyboardButton(text=back, callback_data='accounts_back')]
        ]
    )
    media = InputMediaPhoto(media=FSInputFile(image1), caption=message_text, parse_mode="HTML")
    try:
        await call.message.edit_media(media=media, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await call.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å", show_alert=True)

@start_router.callback_query(F.data.startswith('accounts_back'))
async def accounts_back(call: CallbackQuery):
    lang = await _get_lang(call.from_user.id)
    logger.info(Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} (ID: {call.from_user.id}) –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤" + Style.RESET_ALL)
    await call.message.delete()
    if lang == "en":
        txt = "Choose account type"
    else:
        txt = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞"
    await call.message.answer(txt, reply_markup=accounts_kb(lang))

@start_router.callback_query(F.data.startswith('close_accounts'))
async def close_accounts(call: CallbackQuery):
    logger.info(Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} (ID: {call.from_user.id}) –∑–∞–∫—Ä—ã–ª –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤" + Style.RESET_ALL)
    await call.message.delete()
