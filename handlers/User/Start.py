from aiogram import Bot, Router, F
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from datetime import datetime
from database.db import DataBase, redis_client
from colorama import Fore, Style
from logger import logger
from core.dictionary import *
from handlers.User.keyboard.replykeqyboard import *
from handlers.User.keyboard.InlineKeyboard import *
from config import *
from commands import set_commands_admin

db = DataBase()
start_router = Router()
TIMEOUT = 600

class StarsOrder(StatesGroup):
    stars_order = State()

def is_restricted_time() -> bool:
    now = datetime.now().time()
    return now.hour < 11 or now.hour >= 23

@start_router.message(Command(commands='start'), F.chat.type == "private")
async def start(message: Message, state: FSMContext, bot: Bot):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} id: {message.from_user.id} –í–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "start"' + Style.RESET_ALL)
    await state.clear()
    if is_restricted_time():
        await message.answer(
            "‚è≥ –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!\n\n"
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 11:00 –¥–æ 23:00 (–ú–°–ö).\n"
            "–°–µ–π—á–∞—Å –º—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω–æ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º "
            "–≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üíô"
        )
    await set_commands_admin(bot, message.from_user.id)
    username = message.from_user.username
    if username is None:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω @username.\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å @username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram:\n\n"
            "1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ Telegram.\n"
            "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª.\n"
            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª.\n"
            "4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π @username.\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º! üöÄ"
        )
        return
    result = await db.get_user(message.from_user.id, username)
    if result == 'Banned':
        await message.delete()
        logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} id: {message.from_user.id} –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ' + Style.RESET_ALL)
        return
    elif result == 'admin':
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–æ–π —Ö–æ–∑—è–∏–Ω', reply_markup=start_menu)
    elif result == 'support':
        await message.answer(text='–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∂–∏—â–µ! –ü–æ—Ä–∞–±–æ—Ç–∞–µ–º?')
    elif result == 'media':
        await message.answer('–ü—Ä–∏–≤–µ—Ç, –Ω–∞—à –º–µ–¥–∏–∞!', reply_markup=media_start_kb)
    elif result is True:
        await message.answer(start_hello_message, reply_markup=start_menu, parse_mode='HTML')
    else:
        await message.answer(f'–û—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')

@start_router.message(F.text == 'üìã –ú–µ–Ω—é')
async def open_menu(message: Message, state: FSMContext):
    result = await db.get_banned_users(message.from_user.id)
    if result is True:
        await message.delete()
        return
    username = message.from_user.username
    if username is None:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω @username.\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å @username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram:\n\n"
            "1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ Telegram.\n"
            "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª.\n"
            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª.\n"
            "4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π @username.\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º! üöÄ"
        )
        return
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} id: {message.from_user.id} –í–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "–ú–µ–Ω—é"' + Style.RESET_ALL)
    services_all = await db.get_services()
    rows = [[InlineKeyboardButton(text=s.service_name, callback_data=f"service_{s.id}")] for s in services_all]
    rows.append([InlineKeyboardButton(text="üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="priority_support")])
    keyboard_buttons = InlineKeyboardMarkup(inline_keyboard=rows)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º —É—Å–ª—É–≥—É:', reply_markup=keyboard_buttons)


@start_router.callback_query(F.data == "priority_support")
async def priority_support(call: CallbackQuery):
    text = (
        "üöÄ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞—Ü–µ–ª–µ–Ω–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –≤ —Ä–µ—à–µ–Ω–∏–∏ –ª—é–±—ã—Ö –ø—Ä–æ–±–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—à–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏.\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –í—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∑–∞–∫—Ä—ã—Ç—É—é –±–µ—Å–µ–¥—É, –≥–¥–µ —Å–º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫ –∞–≥–µ–Ω—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ."
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://oplata.info/asp2/pay_wm.asp?id_d=5423227&lang=ru-RU")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)


@start_router.callback_query(F.data == "back_to_menu")
async def back_to_menu(call: CallbackQuery, state: FSMContext):
    await open_menu(call.message, state)



@start_router.message(F.text == 'üÜò –ü–æ–º–æ—â—å')
async def help(message: Message):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} id: {message.from_user.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–º–æ—â–∏' + Style.RESET_ALL)
    await message.answer('–¢—ã –∏ —Ç–∞–∫ —É–∂–µ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ-–ø–æ–¥–¥–µ—Ä–∂–∫–µ, –¥—Ä—É–∂–∏—â–µ!\n'
                         f'–ß—Ç–æ, —Ö–æ—á–µ—à—å —É—Å—Ç—Ä–æ–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –≤—Å—Ç—Ä–µ—á—É —Å —Å–∞–º–∏–º —Å–æ–±–æ–π? ü§® \n'
                         f'–¢–æ–ª—å–∫–æ –Ω–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã –ø—Ä–∏—à–µ–ª —Å—é–¥–∞, —á—Ç–æ–±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ –∂–∏–∑–Ω–∏‚Ä¶ –Ø —Ç—É—Ç –Ω–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ª–µ—á–∏—Ç—å –¥—É—à–µ–≤–Ω—ã–µ —Ä–∞–Ω—ã! \n\n'
                         f'üòà –í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É –∏–∑ –º–µ–Ω—é –∏ –Ω–µ –Ω–∞–∂–∏–º–∞–π –±–æ–ª—å—à–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏ üòéüòú\n\n'
                         f'–ü–æ–¥—Å–∫–∞–∑–∫–∞:\n'
                         f'/start - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞\n'
                         f'/stop_chat - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å —Å–∞–ø–æ—Ä—Ç–æ–º\n', parse_mode='HTML')

@start_router.message(F.text == 'üì© –ñ–∞–ª–æ–±–∞')
async def help(message: Message):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} id: {message.from_user.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–º–æ—â–∏' + Style.RESET_ALL)
    await message.answer('–¢—ã —Å–æ–≤—Å–µ–º —É–∂–µ?\n'
                         f'–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –º–æ–∂–µ—à—å —Ç—É—Ç <a href="https://telefon-doveria.ru/teenagers/">–ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–Ø –ë–û–¢–ê</a> ü§®\n'
                         f'–ê –∑–¥–µ—Å—å –∑–∞—Ö–æ–¥–∏ –Ω–µ –±–æ–π—Å—è, –≤—ã—Ö–æ–¥–∏ –Ω–µ –ø–ª–∞—á—å!\n\n'
                         f'üòà –í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É –∏–∑ –º–µ–Ω—é –∏ –Ω–µ –Ω–∞–∂–∏–º–∞–π –±–æ–ª—å—à–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∂–∞–ª–æ–±–∞, –ø–∞—Ü–∞–Ω—ã –Ω–µ –∂–∞–ª—É—é—Ç—Å—èüòéüòú',
                         parse_mode='HTML', disable_web_page_preview=True)

pinned_messages = {}

async def pin_message(bot: Bot, chat_id: int, message_id: int):
    try:
        await bot.pin_chat_message(
            chat_id=chat_id,
            message_id=message_id,
            disable_notification=True
        )
        pinned_messages[chat_id] = message_id
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {pinned_messages}")
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ!")
    except TelegramAPIError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

@start_router.callback_query(F.data.startswith('service_'))
async def callback_service(call: CallbackQuery, state: FSMContext):
    try:
        result = await db.get_banned_users(call.from_user.id)
        if result is True:
            await call.message.delete()
            return
        key = f"ticket_timeout:{call.from_user.id}"
        if await redis_client.exists(key):
            remaining = await redis_client.ttl(key)
            await call.message.delete()
            await call.message.answer(f"‚è≥ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ:\n{remaining} —Å–µ–∫—É–Ω–¥(—ã) \n({remaining // 60} –º–∏–Ω—É—Ç(—ã)).")
            return
        if is_restricted_time():
            await call.message.answer(
                "‚è≥ –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!\n\n"
                "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 11:00 –¥–æ 23:00 (–ú–°–ö).\n"
                "–°–µ–π—á–∞—Å –º—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω–æ.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º "
                "–≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üíô"
            )
        service_id = int(call.data.split('_')[1])
        user_id = call.from_user.id
        services_all = await db.get_services()
        service_obj = next((s for s in services_all if s.id == service_id), None)
        if service_obj and service_obj.service_name == '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å / Technical Support':
            cnt = await db.count_user_service_requests_today(user_id, service_obj.service_name)
            if cnt >= 2:
                await call.message.answer('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 2 –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–µ —Å—É—Ç–∫–∏. –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –∑–∞–≤—Ç—Ä–∞.')
                return
        add_order = await db.add_orders(service_id, user_id)
        if add_order == 'Active-Ticket':
            await call.message.answer('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç')
            return
        message_send_user = (
            f"üì© –í–∞—à –¢–∏–∫–µ—Ç ‚Ññ{add_order['id']}\n"
            f"üõ† –£—Å–ª—É–≥–∞: {add_order['service_name']}\n"
            f"‚è≥ –°–æ–∑–¥–∞–Ω–∞: {add_order['created_at']}\n\n"
            f"üí¨ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
            f"–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –í–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ç—Ä–µ–±—É–µ–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
            f"‚ÑπÔ∏è –û–±—Ä–∞—â–∞–µ–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –Ω–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –±–æ–ª–µ–µ 2 –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ —Å—É—Ç–∫–∏.\n\n"
            f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n"
            f"‚Ä¢ –î–æ 60 –º–∏–Ω—É—Ç –≤ –ø—Ä–∞–π–º-—Ç–∞–π–º\n"
            f"‚Ä¢ –î–æ 30 –º–∏–Ω—É—Ç –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è\n\n"
            f"üöÄ –ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É,\n"
            f"–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @st3lland"
        )
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞: —Ç–æ–ª—å–∫–æ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª
        keyboard_client = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üóë –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"remove_order:{add_order['id']}")]
            ]
        )
        excluded_usernames = ['jarkadash', 'afnskwb', 'Voldemort_1337', 'st3lland', 'MrMikita', 'GB_Support_Team']
        users = await db.get_user_role_id()
        if add_order['service_name'] == '–ü–æ–ª—É—á–∏—Ç—å –ö–ª—é—á / Get a key':
            admins = [user for user in users if user.role_id == 1 and user.username not in excluded_usernames]
            support_mentions = ", ".join([f"@{admin.username}" for admin in admins])
            tread_id = CHAT_ID_TIKETS_ADMIN
        else:
            supports = [user for user in users if user.role_id in [1, 2] and user.username not in excluded_usernames]
            support_mentions = ", ".join([f"@{support.username}" for support in supports])
            tread_id = GROUP_CHAT_ID_TIKETS_SUPPORT
        logger.info(Fore.BLUE + f'{support_mentions}' + Style.RESET_ALL)
        message_send_support = (
            f"üì© <b>–¢–∏–∫–µ—Ç</b> ‚Ññ{add_order['id']}\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{add_order['client_name']}\n"
            f"üÜî <b>ID:</b> {add_order['client_id']}\n"
            f"<a href='https://t.me/{add_order['client_name']}'>üîó 1.–¢–µ–ª–µ–≥—Ä–∞–º</a>\n"
            f"<a href='tg://user?id={add_order['client_id']}'>üîó 2.–¢–µ–ª–µ–≥—Ä–∞–º</a>\n"
            f"üõ† <b>–£—Å–ª—É–≥–∞:</b> {add_order['service_name']}\n"
            f"‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> <i>–ù–æ–≤—ã–π</i>\n"
            f"‚è≥ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {add_order['created_at']}\n\n"
            f"{support_mentions}\n"
            f"‚ö° <b>–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–Ω—è—Ç—å', —á—Ç–æ–±—ã –≤–∑—è—Ç—å –¢–∏–∫–µ—Ç –≤ —Ä–∞–±–æ—Ç—É.</b>"
        )
        keyboard_admin = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –¢–∏–∫–µ—Ç", callback_data=f"accept_order:{add_order['id']}")],
                [InlineKeyboardButton(text="üóë –û—Ç–∫–ª–æ–Ω–∏—Ç—å –¢–∏–∫–µ—Ç", callback_data=f"cancel_order:{add_order['id']}")]
            ]
        )
        support_message = await call.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=message_send_support,
            message_thread_id=tread_id,
            reply_markup=keyboard_admin,
            parse_mode="HTML"
        )
        user_message = await call.message.edit_text(
            message_send_user,
            parse_mode="HTML",
            reply_markup=keyboard_client
        )
        await db.add_messages_history(chat_id=user_message.chat.id, support_message_id=support_message.message_id, client_message_id=user_message.message_id, order_id=add_order['id'])
        await pin_message(call.bot, GROUP_CHAT_ID, support_message.message_id)
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã "service_": {e}')
        await call.message.answer(f'–û—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')

async def unpin_specific_message(bot: Bot, chat_id: int, message_id: int):
    try:
        await bot.unpin_chat_message(
            chat_id=chat_id,
            message_id=message_id
        )
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ!")
    except TelegramAPIError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

@start_router.callback_query(F.data.startswith('remove_order:'))
async def remove_order(call: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        logger.info(f'üì¢ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.username} (ID: {call.from_user.id})')
        order_id = int(call.data.split(':')[1])
        logger.info(f'üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ ‚Ññ{order_id}...')
        await redis_client.setex(f"ticket_timeout:{call.from_user.id}", TIMEOUT, "1")
        result = await db.remove_ticket_user(order_id)
        if result is False:
            logger.warning(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞ ‚Ññ{order_id}. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.')
            await call.message.answer('–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
            return
        elif result == '–ù–µ –Ω–æ–≤—ã–π':
            await call.message.edit_text('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Ç–∏–∫–µ—Ç, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –ø—Ä–∏–Ω—è—Ç –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç')
            return
        logger.info(f'‚úÖ –¢–∏–∫–µ—Ç ‚Ññ{result["order_id"]} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {result["client_name"]} (ID: {result["client_id"]})')
        minutes = int(TIMEOUT / 60)
        message_send_user = (
            f"üì© –í–∞—à –¢–∏–∫–µ—Ç ‚Ññ{result['order_id']}\n"
            f"üõ† –£—Å–ª—É–≥–∞: {result['service_name']}\n"
            f"‚ùå <b>–û—Ç–º–µ–Ω–µ–Ω</b>\n\n"
            f"‚ö†Ô∏è –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç, —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ {minutes} –º–∏–Ω—É—Ç!"
        )
        message_send_support = (
            f"üì© <b>–¢–∏–∫–µ—Ç</b> ‚Ññ{result['order_id']}\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{result['client_name']}\n"
            f"üÜî <b>ID:</b> {result['client_id']}\n"
            f"<a href='https://t.me/{result['client_name']}'>üîó 1.–¢–µ–ª–µ–≥—Ä–∞–º</a>\n"
            f"<a href='tg://user?id={result['client_id']}'>üîó 2.–¢–µ–ª–µ–≥—Ä–∞–º</a>\n"
            f"üõ† <b>–£—Å–ª—É–≥–∞:</b> {result['service_name']}\n"
            f"‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> <i>–û—Ç–º–µ–Ω–µ–Ω</i>\n"
            f"‚è≥ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {result['created_at']}\n\n"
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Ç–∏–∫–µ—Ç"
        )
        await call.bot.edit_message_text(
            message_id=result['support_message_id'],
            chat_id=GROUP_CHAT_ID,
            text=message_send_support,
            parse_mode="HTML"
        )
        logger.info(f'üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ —Ç–∏–∫–µ—Ç–∞ ‚Ññ{result["order_id"]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.')
        await call.bot.edit_message_text(
            message_id=result['client_message_id'],
            chat_id=call.from_user.id,
            text=message_send_user,
            parse_mode="HTML"
        )
        logger.info(f'üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{result["client_name"]} (ID: {result["client_id"]}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')
        print(result['support_message_id'])
        await unpin_specific_message(call.bot, GROUP_CHAT_ID, int(result['support_message_id']))
    except Exception as e:
        logger.error(f'üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: {e}', exc_info=True)
        await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

@start_router.message(StarsOrder.stars_order)
async def star_worker(message: Message, state: FSMContext):
    data = await state.get_data()
    timeout_task = data.get('timeout_task')
    if timeout_task:
        timeout_task.cancel()
    logger.info(Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –¢–∏–∫–µ—Ç –Ω–∞ {message.text.strip()} " + Style.RESET_ALL)
    reg_data = await state.get_data()
    try:
        stars = float(message.text.strip())
    except ValueError:
        await message.answer("–î–ª—è –æ—Ü–µ–Ω–∫–∏ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
        return
    if not (1 <= stars <= 10):
        await message.answer("–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 10")
        return
    result = await db.stars_order_update(int(reg_data.get('order_id')), stars)
    if result is True:
        await message.answer(f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ—Ü–µ–Ω–∫—É! {stars}", reply_markup=start_menu)
    else:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –¢–∏–∫–µ—Ç–∞: {result}" + Style.RESET_ALL)
        return
    await state.clear()

@start_router.message(F.text == '–ê–∫–∫–∞—É–Ω—Ç—ã RUST')
async def start_accounts(message: Message):
    logger.info(Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} (ID: {message.from_user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É '–ê–∫–∫–∞—É–Ω—Ç—ã RUST'" + Style.RESET_ALL)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞", reply_markup=accounts)

@start_router.callback_query(F.data.startswith('zero_accounts'))
async def zero_accounts(call: CallbackQuery):
    logger.info(Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} (ID: {call.from_user.id}) –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –ù—É–ª–µ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç" + Style.RESET_ALL)
    message_text = (
        f"<b>üéÆ –†–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç</b> —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ —á–∞—Å–∞–º–∏ <b>üïí –æ—Ç 0 –¥–æ 100</b>\n\n"
        f"<b>‚ùóÔ∏è –í–ê–ñ–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï:</b>\n"
        f"<u>–í—ã–¥–∞–µ—Ç—Å—è –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å</u>\n"
        f"‚õîÔ∏è –ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ <u>–∑–∞–ø—Ä–µ—â–µ–Ω–æ –º–µ–Ω—è—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</u> "
        f"(<b>–ø–∞—Ä–æ–ª—å/–ø–æ—á—Ç—É/—Ç–µ–ª–µ—Ñ–æ–Ω</b>) ‚Äî —ç—Ç–æ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ <b>–ø–æ–ª–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ</b> "
        f"–∞–∫–∫–∞—É–Ω—Ç–∞ <u>–±–µ–∑ –æ–±–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞</u> üîê\n\n"
        f"‚úÖ <b>–†–∞–∑—Ä–µ—à–µ–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å:</b>\n"
        f"‚Ä¢ üìù –ü—Ä–æ—Ñ–∏–ª—å\n"
        f"‚Ä¢ üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n"
        f"‚Ä¢ üî§ –ò–º—è\n\n"
        f"<b>‚öôÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ:</b>\n"
        f"üö´ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö <b>–û–¢–ö–õ–Æ–ß–ò–¢–¨</b> Remote play\n"
        f"üíµ –¶–µ–Ω–∞: 800‚ÇΩ"
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å", url='https://www.digiseller.market/asp2/pay_wm.asp?id_d=5075738&lang=ru-RU')],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='accounts_back')]
        ]
    )
    await call.message.edit_text(message_text, parse_mode="HTML", reply_markup=keyboard)

@start_router.callback_query(F.data.startswith('active_accounts'))
async def active_accounts(call: CallbackQuery, bot: Bot):
    logger.info(Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} (ID: {call.from_user.id}) –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç" + Style.RESET_ALL)
    image1 = "media/image1.jpg"
    image2 = "media/image2.jpg"
    message_text = (
        f"<b>üéÆ –†–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç</b> —Å —á–∞—Å–∞–º–∏ <b>üïí –æ—Ç 1500 + —Ç–≤–∏—á –ø—Ä–µ–¥–º–µ—Ç—ã</b>\n\n"
        f"<b>‚ùóÔ∏è –í–ê–ñ–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï:</b>\n"
        f"<u>–í—ã–¥–∞–µ—Ç—Å—è –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å, 3 –¥–Ω—è –≥–∞—Ä–∞–Ω—Ç–∏–∏, –ø–æ—á—Ç–∞ –æ—Ç–¥–∞–µ—Ç—Å—è - –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å—Ä–æ–∫–æ–º –≤ 72 —á–∞—Å–∞</u>\n"
        f"‚õîÔ∏è –î–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ <u>–∑–∞–ø—Ä–µ—â–µ–Ω–æ –º–µ–Ω—è—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</u>"
        f"(<b>–ø–∞—Ä–æ–ª—å/–ø–æ—á—Ç—É/—Ç–µ–ª–µ—Ñ–æ–Ω</b>) ‚Äî —ç—Ç–æ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ <b>–ø–æ–ª–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ</b> "
        f"–∞–∫–∫–∞—É–Ω—Ç–∞ <u>–±–µ–∑ –æ–±–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞</u> üîê\n\n"
        f"‚úÖ <b>–†–∞–∑—Ä–µ—à–µ–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å:</b>\n"
        f"‚Ä¢ üìù –ü—Ä–æ—Ñ–∏–ª—å\n"
        f"‚Ä¢ üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n"
        f"‚Ä¢ üî§ –ò–º—è\n\n"
        f"<b>‚öôÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ:</b>\n"
        f"üö´ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö <b>–û–¢–ö–õ–Æ–ß–ò–¢–¨</b> Remote play\n"
        f"üíµ –¶–µ–Ω–∞: 3000‚ÇΩ"
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å", url='https://www.digiseller.market/asp2/pay_wm.asp?id_d=5075744&lang=ru-RU')],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='accounts_back')]
        ]
    )
    media = InputMediaPhoto(
        media=FSInputFile(image1),
        caption=message_text,
        parse_mode="HTML"
    )
    try:
        await call.message.edit_media(media=media, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await call.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å", show_alert=True)

@start_router.callback_query(F.data.startswith('accounts_back'))
async def accounts_back(call: CallbackQuery):
    logger.info(Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} (ID: {call.from_user.id}) –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤" + Style.RESET_ALL)
    await call.message.delete()
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞", reply_markup=accounts)

@start_router.callback_query(F.data.startswith('close_accounts'))
async def close_accounts(call: CallbackQuery):
    logger.info(Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} (ID: {call.from_user.id}) –∑–∞–∫—Ä—ã–ª –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤" + Style.RESET_ALL)
    await call.message.delete()
