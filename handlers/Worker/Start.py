from aiogram import Bot, Router, F
from aiogram.exceptions import TelegramAPIError, TelegramForbiddenError
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from Utils import get_calculated_period, filter_tickets_for_statistics
from sqlalchemy.testing.config import any_async
import html
from database.db import DataBase, redis_client
import asyncio
from colorama import Fore, Style
from logger import logger
from core.dictionary import *
from handlers.User.keyboard.replykeqyboard import *
from config import *
from aiogram.filters import Filter
from sqlalchemy import select
from database.models import Roles, Users
import pandas as pd

db = DataBase()
active_timers = {}
worker_router = Router()

class IsSupportOrAdmin(Filter):
    async def __call__(self, message: Message) -> bool:
        async with db.Session() as session:
            result = await session.execute(
                select(Roles.role_name)
                .join(Users, Users.role_id == Roles.id)
                .where(Users.user_id == message.from_user.id)
            )
            role_name = result.scalar_one_or_none()
            return role_name in ["admin", "support"]

class TicketState(StatesGroup):
    waiting_for_response = State()

@worker_router.callback_query(F.data.startswith("accept_order:"))
async def accept_order(call: CallbackQuery, state: FSMContext, bot: Bot):
    logger.info(Fore.GREEN + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—å "
                             f"—Ç–∏–∫–µ—Ç {call.data.split(':')[1]}" + Style.RESET_ALL)
    order_id = int(call.data.split(":")[1])
    try:
        accept = await db.accept_orders(order_id, int(call.from_user.id))
        if accept is False or accept == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª–∏!':
            await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –¢–∏–∫–µ—Ç—É", show_alert=True)
        elif accept == 'Active-Ticket':
            await call.answer("–í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –¥—Ä—É–≥–∏–º —Ç–∏–∫–µ—Ç–æ–º!", show_alert=True)
        elif accept == 'Not-New':
            await call.answer("–¢–∏–∫–µ—Ç —É–∂–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç!", show_alert=True)
        else:
            message_accept = (
                f"‚úÖ –¢–∏–∫–µ—Ç –ø—Ä–∏–Ω—è—Ç!\n\n\n"
                f"üì© <b>–¢–∏–∫–µ—Ç</b> ‚Ññ{order_id}\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{html.escape(accept.client_name)}\n"
                f"üÜî <b>ID:</b> {accept.client_id}\n"
                f"<a href=\"https://t.me/{html.escape(accept.client_name)}\">üîó 1.–¢–µ–ª–µ–≥—Ä–∞–º</a>\n"
                f"<a href=\"tg://user?id={accept.client_id}\">üîó 2.–¢–µ–ª–µ–≥—Ä–∞–º</a>\n"
                f"üõ† <b>–£—Å–ª—É–≥–∞:</b> {html.escape(accept.service_name)}\n"
                f"üÜî <b>Support_id:</b> {accept.support_id}\n"
                f"üë®‚Äçüíª <b>Support_name:</b> @{html.escape(accept.support_name)}\n"
                f"‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> {html.escape(accept.status)}\n"
                f"‚è≥ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {accept.created_at.strftime('%d-%m-%Y %H:%M')}\n\n"
                f"‚è≥ <b>–ü—Ä–∏–Ω—è—Ç–∞:</b> {accept.accept_at.strftime('%d-%m-%Y %H:%M')}\n\n"
                f"<a href=\"https://t.me/GBPSupport_bot\">–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞</a>"
            )
            try:
                await bot.send_message(
                    chat_id=int(accept.client_id),
                    text=(
                        f"üéâ –í–∞—à —Ç–∏–∫–µ—Ç ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!\n\n"
                        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ. "
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–Ω –≤ –æ–±—â–µ–Ω–∏–∏ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Ä–µ—à–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å –±—ã—Å—Ç—Ä–µ–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ.\n\n"
                        f"–ö–æ–º–∞–Ω–¥–∞ /stop_chat ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"
                    )
                )
                task = asyncio.create_task(auto_close_ticket_if_silent(order_id, accept.client_id, bot))
                active_timers[order_id] = task
                if accept.service_name == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å / Technical Support":
                    await bot.send_message(
                        chat_id=int(accept.client_id),
                        text=(
                            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
                            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
                            "1. **–°–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –ø–æ–∫—É–ø–∫—É –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ**\n"
                            "   *(–∫–ª—é—á –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–Ω–æ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)*\n\n"
                            "2. –ù–∞–∂–º–∏—Ç–µ `Win + R`\n"
                            "   –í–≤–µ–¥–∏—Ç–µ:\n"
                            "   ```"
                            "   msinfo32\n"
                            "   ```"
                            "   –ù–∞–∂–º–∏—Ç–µ Enter.\n"
                            "   *–°–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –≤ —á–∞—Ç-–±–æ—Ç–∞.*\n\n"
                            "3. –ù–∞–∂–º–∏—Ç–µ `Win + R`\n"
                            "   –í–≤–µ–¥–∏—Ç–µ:\n"
                            "   ```"
                            "   winver\n"
                            "   ```"
                            "   –ù–∞–∂–º–∏—Ç–µ Enter.\n"
                            "   *–°–∫—Ä–∏–Ω—à–æ—Ç –æ–∫–Ω–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –≤ —á–∞—Ç-–±–æ—Ç–∞.*\n\n"
                            "4. **–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ–±–ª–µ–º—É.**\n"
                            "   *–ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ—à–∏–±–æ–∫ ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏.*"
                        ), parse_mode="Markdown"
                    )
                elif accept.service_name == "HWID RESET":
                    await bot.send_message(
                        chat_id=int(accept.client_id),
                        text=(
                            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
                            f"–î–ª—è —Å–±—Ä–æ—Å–∞ HWID –ø—Ä–∏–≤—è–∑–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
                            f"1. <u><b>–°–∫—Ä–∏–Ω—à–æ—Ç</b></u>, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –ø–æ–∫—É–ø–∫—É –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ <u>(–∫–ª—é—á –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–Ω–æ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)</u>\n\n"
                            f"2. –ö–ª—é—á –ø—Ä–æ–¥—É–∫—Ç–∞ <u>–≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</u>\n\n"
                            f"3. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Å–ø—É—Ñ–µ—Ä(–Ω–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ —á–∏—Ç)?"
                        ), parse_mode="HTML"
                    )

                await redis_client.set(f"ticket:{accept.support_id}", order_id)

                await bot.send_message(
                    chat_id=call.from_user.id,
                    text=f"–¢–∏–∫–µ—Ç ‚Ññ{order_id} –ø—Ä–∏–Ω—è—Ç!\n–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–∫—Ä—ã—Ç!",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
                        resize_keyboard=True,
                        one_time_keyboard=False
                    )
                )
            except TelegramForbiddenError as e:
                logger.error(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}" + Style.RESET_ALL)
                await bot.send_message(
                    chat_id=call.from_user.id,
                    text=(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–∏–∫–µ—Ç–∞! {order_id}\n"
                          f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{accept.client_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞\n"
                          )
                )
                message_accept = (
                    f"‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç!\n\n\n"
                    f"üì© <b>–¢–∏–∫–µ—Ç</b> ‚Ññ{order_id}\n"
                    f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{html.escape(accept.client_name)}\n"
                    f"üÜî <b>ID:</b> {accept.client_id}\n"
                    f"<a href=\"https://t.me/{html.escape(accept.client_name)}\">üîó 1.–¢–µ–ª–µ–≥—Ä–∞–º</a>\n"
                    f"<a href=\"tg://user?id={accept.client_id}\">üîó 2.–¢–µ–ª–µ–≥—Ä–∞–º</a>\n"
                    f"üõ† <b>–£—Å–ª—É–≥–∞:</b> {html.escape(accept.service_name)}\n"
                    f"üÜî <b>Support_id:</b> {accept.support_id}\n"
                    f"üë®‚Äçüíª <b>Support_name:</b> @{html.escape(accept.support_name)}\n"
                    f"‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> {html.escape(accept.status)}\n"
                    f"‚è≥ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {accept.created_at.strftime('%d-%m-%Y %H:%M')}\n\n"
                    f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞\n"
                )
                await db.get_auto_close_order(int(order_id), reason="–ê–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–µ (–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)")
                await redis_client.delete(f"ticket:{accept.client_id}")
                await redis_client.delete(f'chat:{accept.client_id}')
                await redis_client.delete(f"role:{accept.client_id}")
                await redis_client.delete(f"chat:{call.from_user.id}")
                await redis_client.delete(f"ticket:{call.from_user.id}")
                await redis_client.delete(f"role:{call.from_user.id}")
                await redis_client.delete(f"messages:{order_id}")
                message_info = await db.get_all_message(int(order_id))
                if message_info:
                    logger.info(Fore.BLUE + f"–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¢–∏–∫–µ—Ç–µ ‚Ññ{order_id}." + Style.RESET_ALL)
                    messages_id = message_info.support_message_id
                    await bot.edit_message_text(
                        chat_id=GROUP_CHAT_ID,
                        message_id=int(message_info.support_message_id),
                        text=message_accept,
                        parse_mode="HTML"
                    )
                    await unpin_specific_message(bot, GROUP_CHAT_ID, int(message_info.support_message_id))
            if 'message_accept' in locals():
                msg_info = await db.get_all_message(int(order_id))
                if msg_info:
                    await bot.edit_message_text(
                        chat_id=GROUP_CHAT_ID,
                        message_id=int(msg_info.support_message_id),
                        text=message_accept,
                        parse_mode="HTML"
                    )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –¢–∏–∫–µ—Ç–∞: {e}")

@worker_router.message(F.contact)
async def handle_support_contact(message: Message, bot: Bot):
    ticket = await redis_client.get(f"ticket:{message.from_user.id}")
    if isinstance(ticket, bytes):
        ticket = ticket.decode()
    if ticket:
        order = await db.get_orders_by_id(int(ticket))
        if order and order.support_id == message.from_user.id:
            username = message.from_user.username
            if username:
                await bot.send_message(
                    chat_id=order.client_id,
                    text=f"üë®‚Äçüíª –í–∞—à —Ç–∏–∫–µ—Ç ‚Ññ{order.id} –ø—Ä–∏–Ω—è—Ç!\n–° –≤–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç @{username}"
                )
            else:
                await bot.send_message(
                    chat_id=order.client_id,
                    text=f"üë®‚Äçüíª –í–∞—à —Ç–∏–∫–µ—Ç ‚Ññ{order.id} –ø—Ä–∏–Ω—è—Ç!\n–° –≤–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
                )
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚úÖ")

@worker_router.callback_query(F.data.startswith("cancel_order:"))
async def cancel_order(call: CallbackQuery, state: FSMContext):
    logger.info(Fore.RED + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å "
                           f"–¢–∏–∫–µ—Ç {call.data.split(':')[1]}" + Style.RESET_ALL)
    order_id = int(call.data.split(":")[1])
    await state.update_data(order_id=order_id)
    try:
        accept = await db.check_role_for_service(int(call.from_user.id), order_id)
        if accept is False or accept == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª–∏!':
            await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –¢–∏–∫–µ—Ç—É", show_alert=True)
        else:
            await call.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –¢–∏–∫–µ—Ç–∞!")
            await state.update_data(message_id=call.message.message_id)
            await state.set_state(TicketState.waiting_for_response)

    except Exception as e:
        logger.error(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¢–∏–∫–µ—Ç–∞: {e}" + Style.RESET_ALL)

async def unpin_specific_message(bot: Bot, chat_id: int, message_id: int):
    try:
        await bot.unpin_chat_message(
            chat_id=chat_id,
            message_id=message_id
        )
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ!")
    except TelegramAPIError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

@worker_router.message(TicketState.waiting_for_response)
async def handle_ticket_response(message: Message, state: FSMContext, bot: Bot):
    logger.info(Fore.RED + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} id: {message.from_user.id} "
                           f"–æ—Ç–º–µ–Ω–∏–ª —Ç–∏–∫–µ—Ç {message.text}" + Style.RESET_ALL)

    reg_data = await state.get_data()
    order_id = reg_data.get('order_id')
    description = message.text.strip()
    message_id = reg_data.get('message_id')
    if len(description) > 100:
        await message.answer("‚õîÔ∏è –¢–µ–∫—Å—Ç –æ—Ç–º–µ–Ω—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤!")
        return
    try:
        cancel = await db.cancel_order(order_id, int(message.from_user.id), description)
        if cancel is False:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            message_accept = (
                f"‚õîÔ∏è –¢–∏–∫–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω!\n\n\n"
                f"üì© <b>–¢–∏–∫–µ—Ç</b> ‚Ññ{order_id}\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{cancel.client_name}\n"
                f"üÜî <b>ID:</b> {cancel.client_id}\n"
                f"<a href=\"https://t.me/{cancel.client_name}\">üîó 1.–¢–µ–ª–µ–≥—Ä–∞–º</a>\n"
                f"<a href=\"tg://user?id={cancel.client_id}\">üîó 2.–¢–µ–ª–µ–≥—Ä–∞–º</a>\n"
                f"üõ† <b>–£—Å–ª—É–≥–∞:</b> {cancel.service_name}\n"
                f"üÜî <b>Support_id:</b> {cancel.support_id}\n"
                f"üë®‚Äçüíª <b>Support_name:</b> @{cancel.support_name}\n"
                f"‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> {cancel.status}\n"
                f"‚è≥ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {cancel.created_at.strftime('%d-%m-%Y %H:%M')}\n\n"
                f"‚è≥ <b>–û—Ç–º–µ–Ω–µ–Ω–∞:</b> {cancel.completed_at.strftime('%d-%m-%Y %H:%M')}\n\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã:</b> {description}\n"
            )

            await message.bot.edit_message_text(chat_id=GROUP_CHAT_ID, text=message_accept, parse_mode="HTML",  message_id=message_id)
            await unpin_specific_message(message.bot, GROUP_CHAT_ID, message_id)
            await bot.send_message(chat_id=message.from_user.id, text=f"‚úÖ –¢–∏–∫–µ—Ç ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {description}")
            try:
                await bot.send_message(chat_id=int(cancel.client_id), text=f"‚õîÔ∏è –í–∞—à —Ç–∏–∫–µ—Ç ‚Ññ{order_id} –æ—Ç–º–µ–Ω–µ–Ω!\n –ü—Ä–∏—á–∏–Ω–∞: {description}")
            except TelegramForbiddenError as e:
                logger.error(Fore.RED + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: {e}" + Style.RESET_ALL)
            await state.clear()

    except Exception as e:
        logger.error(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç–∏–∫–µ—Ç: {e}" + Style.RESET_ALL)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()

@worker_router.message(Command(commands='statistics'), IsSupportOrAdmin())
async def handle_statistics(message: Message, state: FSMContext):
    logger.info(
        Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} id: {message.from_user.id} –ø—Ä–æ—Å–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É" + Style.RESET_ALL
    )

    try:
        start_date, end_date = get_calculated_period()
        logger.info(f"–ü–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {start_date} ‚Äì {end_date}")

        async with db.Session() as session:
            included, excluded = await filter_tickets_for_statistics(
                session, message.from_user.id, start_date, end_date
            )

            def ticket_to_row(ticket, excluded_reason=None):
                return {
                    "id": ticket.id,
                    "client_id": ticket.client_id,
                    "client_name": ticket.client_name,
                    "support_id": ticket.support_id,
                    "support_name": ticket.support_name,
                    "service_id": ticket.service_id,
                    "service_name": ticket.service_name,
                    "created_at": ticket.created_at,
                    "accept_at": ticket.accept_at,
                    "completed_at": ticket.completed_at,
                    "status": ticket.status,
                    "stars": ticket.stars,
                    "description": ticket.description,
                    "excluded_reason": excluded_reason
                }

            all_rows = []
            for ticket in included:
                all_rows.append(ticket_to_row(ticket))
            for ticket, reason in excluded:
                all_rows.append(ticket_to_row(ticket, excluded_reason=reason))

            df = pd.DataFrame(all_rows)

            filtered_df = df[
                (df["excluded_reason"].isnull()) |
                (df["excluded_reason"].astype(str).str.strip() == "")
            ]

            total = len(filtered_df)

            stars_col = filtered_df["stars"].dropna()
            avg_rating = stars_col.mean() if not stars_col.empty else 0

            time_deltas = filtered_df.dropna(subset=["accept_at", "completed_at"])
            time_deltas["duration_sec"] = (time_deltas["completed_at"] - time_deltas["accept_at"]).dt.total_seconds()
            avg_response_time = int(time_deltas["duration_sec"].mean()) if not time_deltas.empty else 0

            rates = await db.get_user_rates(session, message.from_user.id)

            counts = filtered_df["service_name"].value_counts().to_dict()

            salary = 0
            for service, count in counts.items():
                rate = rates.get(service, 0)
                if service == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å / Technical Support" and message.from_user.id == 434791099 and rate < 80:
                    rate = 80
                salary += count * rate

            bonus = rates.get("–ë–æ–Ω—É—Å", 0)
            if bonus and total >= 50:
                salary += (total // 50) * bonus

            statistics = await db.statistics_user_by_id(message.from_user.id, start_date, end_date)

            if not statistics or "error" in statistics:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                return

            minutes, seconds = divmod(avg_response_time, 60)
            stars = f"{avg_rating:.2f}" if avg_rating > 0 else '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ 10 —Ç–∏–∫–µ—Ç–æ–≤!'
            salary_line = f"üí∞ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –ó–ü: {salary:,} —Ä—É–±.".replace(",", " ") if salary else ""

            message_text = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}\n\n"
                f"üü¢ –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {statistics.get('all_orders', 0)}\n"
                f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
                f"üìÜ –ó–∞ –ø–µ—Ä–∏–æ–¥ {start_date.strftime('%d.%m.%y')} ‚Äì {end_date.strftime('%d.%m.%y')}\n"
                f"‚úÖ –¢–∏–∫–µ—Ç–æ–≤: {total}\n"
                f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {stars}\n"
                f"‚è≥ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {minutes:02}.{seconds:02} –º–∏–Ω—É—Ç\n"
                f"{salary_line}"
            )

            await message.answer(message_text)
            logger.info(Fore.BLUE + f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:\n{message_text}" + Style.RESET_ALL)

    except Exception as e:
        logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

def format_ticket_closed_message(order, reason: str) -> str:
    import html
    return (
        f"‚ùóÔ∏è –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n"
        f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n\n"
        f"üì© <b>–¢–∏–∫–µ—Ç</b> ‚Ññ{order.id}\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{order.client_name}\n"
        f"üÜî <b>ID:</b> {order.client_id}\n"
        f"<a href=\"https://t.me/{html.escape(order.client_name)}\">üîó 1.–¢–µ–ª–µ–≥—Ä–∞–º</a>\n"
        f"<a href=\"tg://user?id={order.client_id}\">üîó 2.–¢–µ–ª–µ–≥—Ä–∞–º</a>\n"
        f"üõ† <b>–£—Å–ª—É–≥–∞:</b> {order.service_name}\n"
        f"üÜî <b>Support_id:</b> {order.support_id}\n"
        f"üë®‚Äçüíª <b>Support_name:</b> @{order.support_name}\n"
        f"‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> {order.status}\n"
        f"‚è≥ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {order.created_at.strftime('%d-%m-%Y %H:%M')}\n\n"
        f"‚è≥ <b>–ü—Ä–∏–Ω—è—Ç–∞:</b> {order.accept_at.strftime('%d-%m-%Y %H:%M')}\n\n"
        f"‚è≥ <b>–ó–∞–∫—Ä—ã—Ç–∞:</b> {order.completed_at.strftime('%d-%m-%Y %H:%M')}\n\n"
        f"<a href=\"https://t.me/GBPSupport_bot\">–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞</a>"
    )

async def close_ticket(order_id: int, client_id: int, bot: Bot, reason: str):
    try:
        await db.get_auto_close_order(order_id, reason=reason)

        order_info = await db.get_orders_by_id(order_id)
        if not order_info:
            logger.warning(f"[TIMER] –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–∏–∫–µ—Ç ‚Ññ{order_id} –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return

        await redis_client.delete(f"ticket:{order_info.client_id}")
        await redis_client.delete(f'chat:{order_info.client_id}')
        await redis_client.delete(f"role:{order_info.client_id}")
        await redis_client.delete(f"messages:{order_id}")
        await redis_client.delete(f"ticket:{order_info.support_id}")
        await redis_client.delete(f'chat:{order_info.support_id}')
        await redis_client.delete(f"role:{order_info.support_id}")

        logger.info(f"[TIMER] –¢–∏–∫–µ—Ç ‚Ññ{order_id} –∑–∞–∫—Ä—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {reason}")

        message_info = await db.get_all_message(order_id)
        if message_info:
            message_edit_text = format_ticket_closed_message(order_info, reason)
            await bot.edit_message_text(
                message_id=int(message_info.support_message_id),
                chat_id=GROUP_CHAT_ID,
                text=message_edit_text,
                parse_mode="HTML"
            )
            await unpin_specific_message(bot, GROUP_CHAT_ID, int(message_info.support_message_id))

        try:
            await bot.send_message(
                chat_id=order_info.support_id,
                text=f"üö™ –¢–∏–∫–µ—Ç ‚Ññ{order_id} –∑–∞–∫—Ä—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. {reason}"
            )
        except TelegramForbiddenError:
            logger.warning(f"[TIMER] Support –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        if reason == "–ê–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–µ (–ö–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª)":
            try:
                await bot.send_message(
                    chat_id=client_id,
                    text=f"‚õîÔ∏è –¢–∏–∫–µ—Ç ‚Ññ{order_id} –±—ã–ª –∑–∞–∫—Ä—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—Ç–≤–µ—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –ø–æ–º–æ—â—å –≤—Å—ë –µ—â—ë –Ω—É–∂–Ω–∞."
                )
            except TelegramForbiddenError:
                logger.warning(f"[TIMER] –ö–ª–∏–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    except Exception as e:
        logger.error(f"[CLOSE ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ ‚Ññ{order_id}: {e}")

async def auto_close_ticket_if_silent(order_id: int, client_id: int, bot: Bot):
    try:
        logger.info(f"[TIMER] –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞ ‚Ññ{order_id}")
        await asyncio.sleep(119)

        order_info = await db.get_orders_by_id(order_id)
        if not order_info or order_info.status == "closed":
            logger.info(f"[TIMER] –¢–∏–∫–µ—Ç ‚Ññ{order_id} —É–∂–µ –±—ã–ª –∑–∞–∫—Ä—ã—Ç –≤—Ä—É—á–Ω—É—é ‚Äî —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω.")
            return

        try:
            await bot.send_message(
                chat_id=client_id,
                text="‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 3-—Ö –º–∏–Ω—É—Ç, —Ç–∏–∫–µ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç!"
            )
            logger.info(f"[TIMER] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É –ø–æ —Ç–∏–∫–µ—Ç—É ‚Ññ{order_id}")
        except TelegramForbiddenError:
            reason = "–ê–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–µ (–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)"
            logger.warning(f"[TIMER] –ö–ª–∏–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –¥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ ‚Ññ{order_id}")
            await close_ticket(order_id, client_id, bot, reason)
            return

        await asyncio.sleep(179)
        order_info = await db.get_orders_by_id(order_id)
        if not order_info or order_info.status == "closed":
            logger.info(f"[TIMER] –¢–∏–∫–µ—Ç ‚Ññ{order_id} –±—ã–ª –∑–∞–∫—Ä—ã—Ç –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ‚Äî –∞–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return

        message_count = await redis_client.get(f"messages:{order_id}")
        if message_count is None or int(message_count) == 0:
            try:
                await bot.send_chat_action(chat_id=client_id, action="typing")
                reason = "–ê–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–µ (–ö–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª)"
            except TelegramForbiddenError:
                reason = "–ê–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–µ (–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)"
                logger.warning(f"[TIMER] –ö–ª–∏–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –¥–æ –∞–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞ ‚Ññ{order_id}")

            await close_ticket(order_id, client_id, bot, reason)
        else:
            logger.info(f"[TIMER] –¢–∏–∫–µ—Ç ‚Ññ{order_id} –Ω–µ –∑–∞–∫—Ä—ã—Ç ‚Äî –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π")

    except Exception as e:
        logger.error(f"[TIMER ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ ‚Ññ{order_id}: {e}")
