from aiogram import Bot, Router, F
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.testing.config import any_async
from aiogram.enums import ParseMode
import asyncio
from Utils import get_calculated_period, filter_tickets_for_statistics
from datetime import datetime
from math import floor
from database.db import DataBase
from colorama import Fore, Style
from logger import logger
from core.dictionary import *
from handlers.Admin.keyboard.InlineKb import *
from config import *
from handlers.export import *
db = DataBase()
DATE_FORMAT = "%d.%m.%y"

#–í—Ä–µ–º–µ–Ω–Ω–æ, –Ω–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
import pandas as pd
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
import time
from openpyxl import load_workbook
from openpyxl.styles import PatternFill
from aiogram.types import FSInputFile
from aiogram.filters import Filter
from sqlalchemy import select
from database.models import Users, Roles


admin_router = Router()
# üîê –§–∏–ª—å—Ç—Ä –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–æ–ª–∏ admin (–¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
class IsAdmin(Filter):
    async def __call__(self, message: Message) -> bool:
        async with db.Session() as session:
            result = await session.execute(
                select(Users, Roles.role_name)
                .join(Roles, Users.role_id == Roles.id)
                .where(Users.user_id == message.from_user.id)
            )
            row = result.first()
            return row is not None and row[1] == "admin"

# üîê –§–∏–ª—å—Ç—Ä –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–æ–ª–∏ admin (–¥–ª—è –≤—Å–µ—Ö callback-–∫–Ω–æ–ø–æ–∫)
class IsAdminCallback(Filter):
    async def __call__(self, call: CallbackQuery) -> bool:
        async with db.Session() as session:
            result = await session.execute(
                select(Roles.role_name)
                .join(Users, Users.role_id == Roles.id)
                .where(Users.user_id == call.from_user.id)
            )
            role_name = result.scalar_one_or_none()
            return role_name == "admin"

# ‚õìÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ admin_router
admin_router.message.filter(IsAdmin())
admin_router.callback_query.filter(IsAdminCallback())




class AddRoles(StatesGroup):
    add_name = State()


class AddService(StatesGroup):
    name_service = State()
    role_service = State()


class Banned(StatesGroup):
    add_id = State()
    delete_id = State()


class AddUserRole(StatesGroup):
    Username = State()
    role_user = State()

class StartMailing(StatesGroup):
    text_mailing = State()

class PaymentStates(StatesGroup):
    awaiting_new_rate = State()

CATEGORY_MAP = {
    "technical_support": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å / Technical Support",
    "payment_support": "–ü–æ–º–æ—â—å —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ / Payment Support",
    "hwid_reset": "HWID RESET",
    "reselling": "Reselling",
    "get_key": "–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á / Get a key",
    "bonus_per_50": "–ë–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥—ã–µ 50 —Ç–∏–∫–µ—Ç–æ–≤"
}



@admin_router.message(Command(commands=['admin']), F.chat.type == "private")
async def admin(message: Message):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} id: {message.from_user.id} '
                            f'–≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /admin' + Style.RESET_ALL)
    try:
        if message.from_user.id == 434791099 or message.from_user.id == 835867765:
            await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=admin_panel)
        elif await db.get_admin_by_id(message.from_user.id) is True:
            await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=admin_panel)
        else:
            await message.answer(text='–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –≤–≤–µ–¥–∏—Ç–µ /start')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /admin {e}')


@admin_router.callback_query(F.data.startswith('roles'))
async def all_roles(call: CallbackQuery, state: FSMContext):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} '
                            f'–≤—ã–±—Ä–∞–ª –†–æ–ª–∏' + Style.RESET_ALL)
    try:
        await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=admin_roles)
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ {e}')


@admin_router.callback_query(F.data.startswith('back_menu'))
async def back_menu(call: CallbackQuery, state: FSMContext):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} '
                            f'–≤—ã–±—Ä–∞–ª –ù–∞–∑–∞–¥' + Style.RESET_ALL)
    try:
        await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=admin_panel)
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /back_menu {e}')


@admin_router.callback_query(F.data.startswith('black_list'))
async def black_list(call: CallbackQuery, state: FSMContext):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} '
                            f'–≤—ã–±—Ä–∞–ª –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫' + Style.RESET_ALL)
    try:
        await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=admin_black_list)
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /black_list {e}')


@admin_router.callback_query(F.data.startswith('role_add'))
async def start_add_role(call: CallbackQuery, state: FSMContext):
    logger.info(
        Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id}  –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏' + Style.RESET_ALL)
    await call.message.delete()
    try:
        await call.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏')
        await state.set_state(AddRoles.add_name)
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ {e}')


@admin_router.message(AddRoles.add_name)
async def add_role(message: Message, state: FSMContext, bot: Bot):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} id: {message.from_user.id} '
                            f'–í–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏: {message.text}' + Style.RESET_ALL)
    try:
        await state.update_data(role_name=message.text)
        result = await db.add_roles(message.text)
        if result is True:
            await message.answer(text='–†–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=admin_panel)
            await state.clear()
        elif result == 'Name_is_occupied':
            await message.answer(text='–†–æ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
                                 reply_markup=admin_panel)
            return
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ {e}')


@admin_router.callback_query(F.data.startswith('role_delete_'))
async def delete_role(call: CallbackQuery, state: FSMContext):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} '
                            f'–≤—ã–±—Ä–∞–ª —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å {call.data.split("_")[2]}' + Style.RESET_ALL)
    await call.message.delete()
    id_role = int(call.data.split("_")[2])
    try:
        result = await db.delete_roles(id_role)
        if result is True:
            await call.message.answer(text='–†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞', reply_markup=admin_panel)
        elif result == '–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!':
            await call.message.answer(text=result, reply_markup=admin_panel)
            return
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ {e}')


@admin_router.callback_query(F.data.startswith('role_del'))
async def delete_role(call: CallbackQuery, state: FSMContext):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} '
                            f'–≤—ã–±—Ä–∞–ª —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å' + Style.RESET_ALL)

    roles = await db.get_roles()
    roles_buttons = [InlineKeyboardButton(text=f'{role.role_name}', callback_data=f'role_delete_{role.id}') for role in
                     roles]
    back = [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_menu')]
    keyboard_buttons = InlineKeyboardMarkup(inline_keyboard=[[button] for button in roles_buttons] + [[back[0]]])
    try:
        await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: ', reply_markup=keyboard_buttons)
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ {e}')


@admin_router.callback_query(F.data.startswith('admin_service'))
async def services(call: CallbackQuery, state: FSMContext):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} '
                            f'–≤—ã–±—Ä–∞–ª –£—Å–ª—É–≥–∏' + Style.RESET_ALL)
    try:
        await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=admin_services)
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /services {e}')


@admin_router.message(AddService.name_service)
async def add_service(message: Message, state: FSMContext, bot: Bot):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} id: {message.from_user.id} '
                            f'–í–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: {message.text}' + Style.RESET_ALL)
    roles = await db.get_roles()
    roles_buttons = [
        InlineKeyboardButton(text=f'{role.id}.{role.role_name}', callback_data=f'services_add_role_{role.id}') for
        role in roles]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button] for button in roles_buttons])
    try:
        await state.update_data(service_name=message.text)
        sent_message = await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–ª–∏ —Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É—Å–ª—É–≥–µ'
                                  '–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ (1,2,3)', reply_markup=keyboard)


        await state.update_data(message_id=sent_message.message_id)
        await state.set_state(AddService.role_service)
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ {e}')


@admin_router.message(AddService.role_service)
async def add_service_role(message: Message, state: FSMContext, bot: Bot):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} id: {message.from_user.id}'
                            f'–í—ã–±—Ä–∞–ª —Ä–æ–ª—å –¥–ª—è —É—Å–ª—É–≥–∏: {message.text.strip()}' + Style.RESET_ALL)

    reg_data = await state.get_data()
    message_id = reg_data.get('message_id')
    if message_id:
        await bot.delete_message(
            chat_id=message.chat.id,
            message_id=message_id
        )
    service_name = reg_data.get('service_name')
    role_id = message.text.strip()
    try:
        result = await db.add_service(service_name, role_id)
        if result is True:
            await message.answer(text='–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=admin_panel)
            await state.clear()
        else:
            await message.answer(text='–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', reply_markup=admin_panel)
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ {e}')


@admin_router.callback_query(F.data.startswith('services_add'))
async def start_add_service(call: CallbackQuery, state: FSMContext):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} '
                            f'–Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏' + Style.RESET_ALL)

    await call.message.delete()
    try:
        await call.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏')
        await state.set_state(AddService.name_service)
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ {e}')


@admin_router.callback_query(F.data.startswith('services_del_'))
async def delete_service(call: CallbackQuery, state: FSMContext):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} '
                            f'–≤—ã–±—Ä–∞–ª —É–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É {call.data.split("_")[2]}' + Style.RESET_ALL)
    await call.message.delete()
    service_id = int(call.data.split("_")[2])
    try:
        result = await db.service_delete(service_id)
        if result is True:
            await call.message.answer(text='–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=admin_panel)
        elif result == '–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!':
            await call.message.answer(text=result, reply_markup=admin_panel)
            return
        else:
            logger.error(Fore.RED + f'{result}' + Style.RESET_ALL)
            await call.message.answer(text='–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', reply_markup=admin_panel)
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ {e}')
        await call.message.answer(text='–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', reply_markup=admin_panel)


@admin_router.callback_query(F.data.startswith('services_del'))
async def start_del_service(call: CallbackQuery, state: FSMContext):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} '
                            f'–Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏' + Style.RESET_ALL)

    services = await db.get_services()
    services_buttons = [InlineKeyboardButton(text=f'{service.service_name}', callback_data=f'services_del_{service.id}')
                        for service in services]
    back = [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_menu')]
    keybord = InlineKeyboardMarkup(inline_keyboard=[[button] for button in services_buttons] + [[back[0]]])

    try:
        await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: ', reply_markup=keybord)
    except Exception as e:
        await call.message.answer("–û—à–∏–±–∫–∞")
        logger.error(Fore.RED + f'–û—à–∏–±–∫–∞ {e}' + Style.RESET_ALL)


@admin_router.callback_query(F.data.startswith('blackList_add'))
async def start_add_black_list(call: CallbackQuery, state: FSMContext):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} '
                            f'–Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫' + Style.RESET_ALL)
    await call.message.delete()
    try:
        await call.message.answer(text='–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:')
        await state.set_state(Banned.add_id)
    except Exception as e:
        logger.error(Fore.RED + f'–û—à–∏–±–∫–∞ {e}' + Style.RESET_ALL)


@admin_router.message(Banned.add_id)
async def add_black_list(message: Message, state: FSMContext, bot: Bot):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} id: {message.from_user.id}'
                            f'–í–≤–µ–ª id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}' + Style.RESET_ALL)

    user_id = message.text.strip()

    try:
        result = await db.banned_users(user_id)
        if result is True:
            await message.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫', reply_markup=admin_panel)
            await state.clear()
        elif result == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!':
            await message.answer(text=result, reply_markup=admin_panel)
            await state.clear()
        else:
            logger.error(Fore.RED + f'{result}' + Style.RESET_ALL)
            await message.answer(text='–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', reply_markup=admin_panel)
    except Exception as e:
        logger.error(Fore.RED + f'–û—à–∏–±–∫–∞ {e}' + Style.RESET_ALL)
        await message.answer(text='–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', reply_markup=admin_panel)


@admin_router.callback_query(F.data.startswith('blackList_del'))
async def start_del_black_list(call: CallbackQuery, state: FSMContext):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} '
                            f'–Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞' + Style.RESET_ALL)

    await call.message.delete()
    await call.message.answer(text='–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:')
    await state.set_state(Banned.delete_id)


@admin_router.message(Banned.delete_id)
async def del_black_list(message: Message, state: FSMContext, bot: Bot):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} id: {message.from_user.id} '
                            f'–í–≤–µ–ª id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}' + Style.RESET_ALL)

    user_id = int(message.text.strip())
    try:
        result = await db.delete_banned_users(user_id)
        if result is True:
            await message.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞', reply_markup=admin_panel)
            await state.clear()
        elif result == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!':
            await message.answer(text=result, reply_markup=admin_panel)
            await state.clear()
        else:
            await message.answer(text='–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', reply_markup=admin_panel)
            await state.clear()
    except Exception as e:
        logger.error(Fore.RED + f'–û—à–∏–±–∫–∞ {e}' + Style.RESET_ALL)
        await message.answer(text='–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', reply_markup=admin_panel)
        await state.clear()


@admin_router.callback_query(F.data.startswith('roleUser_add'))
async def start_add_role_user(call: CallbackQuery, state: FSMContext, bot: Bot):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} '
                            f'–Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é' + Style.RESET_ALL)
    await call.message.delete()
    await call.message.answer(text='–í–≤–µ–¥–∏—Ç–µ @Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å:')
    await state.set_state(AddUserRole.Username)


@admin_router.message(AddUserRole.Username)
async def add_role_user(message: Message, state: FSMContext, bot: Bot):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} id: {message.from_user.id} '
                            f'–í–≤–µ–ª @Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}' + Style.RESET_ALL)
    username = message.text.strip()

    if '@' in username:
        username = username.replace('@', '')

    users = await db.get_users_by_username(username)

    if users == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!':
        await message.answer(text=users, reply_markup=admin_panel)
        await state.clear()
        return
    elif users is False:
        await message.answer(text='–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!', reply_markup=admin_panel)
        await state.clear()
    else:
        await state.update_data(users=username)
        role = await db.get_roles()
        roles_buttons = [InlineKeyboardButton(text=f'{role.role_name}', callback_data=f'roleUser_user_{role.id}') for
                         role in role]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[button] for button in roles_buttons])
        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', reply_markup=keyboard)


@admin_router.callback_query(F.data.startswith('roleUser_user_'))
async def add_role_user(call: CallbackQuery, state: FSMContext, bot: Bot):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} '
                            f'–í—ã–±—Ä–∞–ª —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.data.split("_")[2]}' + Style.RESET_ALL)

    await call.message.delete()
    role_id = int(call.data.split("_")[2])
    reg_data = await state.get_data()
    username = reg_data.get('users')

    result = await db.add_user_role(username, role_id)
    if result is not False:
        await call.message.answer(text='–†–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=admin_panel)
        await bot.send_message(
            chat_id=result['user_id'],
            text=f"‚úÖ –í–∞–º –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å: {result['role_name']} üéâ\n"
                 "üîÑ –ß—Ç–æ–±—ã —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start"
        )
        await state.clear()
    elif result == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!':
        await call.message.answer(text=result, reply_markup=admin_panel)
        await state.clear()
    else:
        await call.message.answer(text='–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', reply_markup=admin_panel)
        await state.clear()


@admin_router.callback_query(F.data.startswith('role_user'))
async def start_del_role_user(call: CallbackQuery, state: FSMContext):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} '
                            f'–æ—Ç—Ä—ã–ª –º–µ–Ω—é –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏' + Style.RESET_ALL)
    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=admin_role_user_edit)


@admin_router.callback_query(F.data.startswith('roleUser_del_'))
async def start_del_role_user(call: CallbackQuery, state: FSMContext, bot: Bot):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} '
                            f'–Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.data.split("_")[2]}' + Style.RESET_ALL)

    user_id = int(call.data.split("_")[2])
    await call.message.delete()
    result = await db.delete_user_role(user_id)
    if result is True:
        await call.message.answer(text='–†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞', reply_markup=admin_panel)
        message_text = ('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üîî\n\n'
                   'üì¢ –í—ã —Å–Ω—è—Ç—ã —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.'
                   'üôè –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É! –í–∞—à –≤–∫–ª–∞–¥ –Ω–µ –æ—Å—Ç–∞–ª—Å—è –Ω–µ–∑–∞–º–µ—á–µ–Ω–Ω—ã–º.'
                   '‚ú® –ñ–µ–ª–∞–µ–º –≤–∞–º —É—Å–ø–µ—Ö–æ–≤ –≤ –±—É–¥—É—â–µ–º, –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –¥–æ–±—Ä–æ–≥–æ! üåü'
                   '–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ ü¶äGAMEBREAKER ü§ù'
        )
        await bot.send_message(chat_id=user_id, text=message_text)
        await state.clear()
    else:
        await call.message.answer(text='–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', reply_markup=admin_panel)
        await state.clear()


@admin_router.callback_query(F.data.startswith('roleUser_del'))
async def start_del_role_user(call: CallbackQuery, state: FSMContext):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} '
                            f'–Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' + Style.RESET_ALL)

    users = await db.get_user_role()
    if users is False:
        await call.message.answer(text='–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!', reply_markup=admin_panel)
        await state.clear()
        return
    elif users == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!':
        await call.message.answer(text=users, reply_markup=admin_panel)
        await state.clear()
    else:
        user_buttons = [InlineKeyboardButton(text=f'{user.username}', callback_data=f'roleUser_del_{user.user_id}')
                        for user in users]
        back = [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='role_user')]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[button] for button in user_buttons] + [[back[0]]])
        await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å:',
                                     reply_markup=keyboard)


@admin_router.callback_query(F.data.startswith('export'))
async def start_export(call: CallbackQuery, state: FSMContext, bot: Bot):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} '
                            f'–Ω–∞—á–∞–ª —ç–∫—Å–ø–æ—Ä—Ç' + Style.RESET_ALL)
    await call.message.delete()
    await export_data(call, bot)

@admin_router.callback_query(F.data.startswith('malling_message'))
async def start_mailing(call: CallbackQuery, state: FSMContext, bot: Bot):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} '
                            f'–Ω–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É' + Style.RESET_ALL)

    await call.message.delete()
    await call.message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')
    await state.set_state(StartMailing.text_mailing)


@admin_router.message(StartMailing.text_mailing)
async def start_mailing(message: Message, state: FSMContext, bot: Bot):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –Ω–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É' + Style.RESET_ALL)

    users = await db.get_user_all()
    user_ids = [user.user_id for user in users]

    if not user_ids:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
        await state.clear()
        return

    success = 0
    errors = 0
    total = len(user_ids)

    progress = await message.answer(f"üì§ –ü—Ä–æ–≥—Ä–µ—Å—Å: 0/{total}")

    for index, user_id in enumerate(user_ids, 1):
        try:
            await bot.copy_message(
                chat_id=user_id,
                from_chat_id=message.chat.id,
                message_id=message.message_id
            )
            success += 1
        except Exception as e:
            if "Too Many Requests" in str(e):
                # –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ - –∂–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
                await progress.edit_text(f"‚ö†Ô∏è –õ–∏–º–∏—Ç! –ñ–¥–µ–º 10 —Å–µ–∫...")
                await asyncio.sleep(10)
                continue
            errors += 1
            logger.error(f"–û—à–∏–±–∫–∞ {user_id}: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if index % 10 == 0:
            await progress.edit_text(f"üì§ –ü—Ä–æ–≥—Ä–µ—Å—Å: {index}/{total}")

        # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 0.1 —Å–µ–∫ (10 —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫)
        await asyncio.sleep(0.1)

    await progress.delete()
    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"‚ñ™ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚ñ™ –û—à–∏–±–æ–∫: {errors}\n"
        f"‚ñ™ –í—Å–µ–≥–æ: {total}"
    )
    await state.clear()


@admin_router.callback_query(F.data.startswith('start_media'))
async def start_media(call: CallbackQuery, state: FSMContext, bot: Bot):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} id: {call.from_user.id} '
                            f'–Ω–∞—á–∞–ª –∑–∞–≥—Ä—É–∑–∫—É –º–µ–¥–∏–∞' + Style.RESET_ALL)

    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=admin_media_menu_kb)


@admin_router.callback_query(F.data == "edit_rates")
async def show_users_for_rate_edit(callback: CallbackQuery):
    users = await db.get_users_with_roles_for_rates()
    if not users:
        await callback.message.edit_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–æ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞–≤–æ–∫.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
                            [InlineKeyboardButton(text=f"@{username}", callback_data=f"edit_rate:{user_id}")]
                            for user_id, username in users
                        ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_menu")]]
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞–≤–æ–∫:", reply_markup=kb)

@admin_router.callback_query(F.data.startswith("edit_rate:"))
async def show_categories(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
                            [InlineKeyboardButton(text=cat, callback_data=f"set_rate:{user_id}:{field}")]
                            for field, cat in CATEGORY_MAP.items()
                        ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_user_list")]]
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏:", reply_markup=kb)

@admin_router.callback_query(F.data.startswith("set_rate:"))
async def prompt_new_rate(callback: CallbackQuery, state: FSMContext):
    _, user_id, field = callback.data.split(":")
    user = await db.get_user_by_id(int(user_id))
    record = await db.get_payment_rate(int(user_id))
    if record is None:
        await db.create_payment_rate(int(user_id))
        record = await db.get_payment_rate(int(user_id))

    current = getattr(record, field)

    await state.update_data(user_id=int(user_id), field=field)
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {current} —Ä—É–±. –¥–ª—è @{user.username} –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        f"\"{CATEGORY_MAP[field]}\"\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
    )
    await state.set_state(PaymentStates.awaiting_new_rate)

@admin_router.callback_query(F.data == "back_to_user_list")
async def back_to_user_list(callback: CallbackQuery):
    users = await db.get_users_with_roles_for_rates()
    if not users:
        await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
                            [InlineKeyboardButton(text=f"@{username}", callback_data=f"edit_rate:{user_id}")]
                            for user_id, username in users
                        ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_menu")]]
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)

@admin_router.message(PaymentStates.awaiting_new_rate)
async def save_new_rate(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data["user_id"]
    field = data["field"]
    if not field:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è.")
        await state.clear()
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ
    try:
        value = int(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –Ω–µ –º–µ–Ω–µ–µ 0 –∏ –Ω–µ –±–æ–ª–µ–µ 15 000
    if value < 0 or value > 15000:
        await message.answer("‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 15‚ÄØ000 —Ä—É–±.")
        return

    # –ü–æ–ª—É—á–∞–µ–º username
    username = await db.get_username_by_id(user_id)
    if not username:
        await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    if field == "technical_support" and user_id == 434791099 and value < 80:
        await message.answer("‚ö†Ô∏è –°—Ç–∞–≤–∫–∞ –¥–ª—è @jarkadash –ø–æ Technical Support –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ 80 —Ä—É–±.")
        return

    # –ü–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
    record = await db.get_payment_rate(user_id)
    if not record:
        await db.create_payment_rate(user_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É
    await db.update_payment_rate(user_id, field, value)

    # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category = CATEGORY_MAP.get(field, field)

    await message.answer(
        f"‚úÖ –°—Ç–∞–≤–∫–∞ @{username} –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category}\" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {value} —Ä—É–±.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"edit_rate:{user_id}")]
            ]
        )
    )

    await state.clear()


@admin_router.message(F.text.startswith("/allstats"))
async def all_stats_command(message: Message, bot: Bot):
    try:
        parts = message.text.strip().split(" ")

        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á—ë—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        if len(parts) == 1:
            await message.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`/allstats 11.07.25‚Äì25.07.25`", parse_mode="Markdown")
            start_date, end_date = get_calculated_period()
        elif len(parts) == 2 and "‚Äì" in parts[1]:
            date_range = parts[1].split("‚Äì")
            start_date = datetime.strptime(date_range[0], DATE_FORMAT).date()
            end_date = datetime.strptime(date_range[1], DATE_FORMAT).date()
        else:
            await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /allstats –î–î.–ú–ú.–ì–ì‚Äì–î–î.–ú–ú.–ì–ì")
            return
        user = message.from_user
        await bot.send_message(
            434791099,
            f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or '–±–µ–∑ username'} (id: {user.id}) –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π /allstats"
        )

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —Ä–æ–ª—è–º–∏ support/admin
        users = await db.get_users_with_roles_for_rates()
        if not users:
            await message.answer("–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —Ä–æ–ª—å—é support/admin.")
            return

        from Utils import filter_tickets_for_statistics
        from Utils import order_to_dict

        text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}\n\n"

        async with db.Session() as session:
            for row in users:
                user_id = row[0]
                username = row[1] or "–±–µ–∑ username"

                included, _ = await filter_tickets_for_statistics(session, user_id, start_date, end_date)
                if not included:
                    continue

                counts = {}
                for ticket in included:
                    counts[ticket.service_name] = counts.get(ticket.service_name, 0) + 1

                rates = await db.get_user_rates(session, user_id)
                salary = 0
                total = sum(counts.values())

                for service, count in counts.items():
                    rate = rates.get(service, 0)

                    if service == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å / Technical Support" and user_id == 434791099 and rate < 80:
                        rate = 80

                    salary += count * rate

                bonus = rates.get("–ë–æ–Ω—É—Å", 0)
                if bonus and total >= 50:
                    salary += floor(total / 50) * bonus

                CATEGORY_ORDER = {
                    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å / Technical Support": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å",
                    "–ü–æ–º–æ—â—å —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ / Payment Support": "–ü–æ–º–æ—â—å —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏",
                    "HWID RESET": "HWID reset",
                    "Reselling": "Reselling",
                    "–ü–æ–ª—É—á–∏—Ç—å –ö–ª—é—á / Get a key": "–í—ã–¥–∞—á–∞ –∫–ª—é—á–µ–π"
                }

                text += f"üë®‚Äçüíª @{username}:\n"
                for category in CATEGORY_ORDER:
                    if category in counts:
                        text += f"- {CATEGORY_ORDER[category]}: {counts[category]}\n"
                text += f"üßæ –í—Å–µ–≥–æ: {total}\n"
                formatted_salary = f"{salary:,.0f}".replace(",", " ")
                text += f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–ª: {formatted_salary} —Ä—É–±.\n\n"

        all_ticket_rows = []

        async with db.Session() as session:
            for row in users:
                user_id = row[0]
                username = row[1] or "–±–µ–∑ username"

                included, excluded = await filter_tickets_for_statistics(session, user_id, start_date, end_date)

                def ticket_to_row(ticket, excluded_reason=None):
                    return {
                        "id": ticket.id,
                        "client_id": ticket.client_id,
                        "client_name": ticket.client_name,
                        "support_id": ticket.support_id,
                        "support_name": ticket.support_name,
                        "service_id": ticket.service_id,
                        "service_name": ticket.service_name,
                        "created_at": ticket.created_at,
                        "accept_at": ticket.accept_at,
                        "completed_at": ticket.completed_at,
                        "status": ticket.status,
                        "stars": ticket.stars,
                        "description": ticket.description,
                        "excluded_reason": excluded_reason
                    }

                for ticket in included:
                    all_ticket_rows.append(ticket_to_row(ticket))
                for ticket, reason in excluded:
                    all_ticket_rows.append(ticket_to_row(ticket, excluded_reason=reason))

        if ( message.from_user.id == 434791099 and message.chat.type == "private" and all_ticket_rows ):
            df = pd.DataFrame(all_ticket_rows)

            filename = f"–û—Ç—á–µ—Ç_allstats_{start_date.strftime('%d.%m.%y')}_{end_date.strftime('%d.%m.%y')}.xlsx"
            df.to_excel(filename, index=False)

            time.sleep(0.2)

            try:
                wb = load_workbook(filename)
            except FileNotFoundError:
                await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å Excel-—Ñ–∞–π–ª: –æ–Ω –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")
                return
            except PermissionError:
                await message.answer("‚ùó –§–∞–π–ª —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –≤ Excel. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
                return

            ws = wb.active
            fill = PatternFill(start_color="C7C385", end_color="C7C385", fill_type="solid")
            excluded_col_index = list(df.columns).index("excluded_reason") + 1

            for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
                if row[excluded_col_index - 1].value:
                    for cell in row:
                        cell.fill = fill

            wb.save(filename)
            logger.info("[ALLSTATS] Excel-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: %s", filename)

            try:
                file = FSInputFile(filename)
                await message.answer_document(file, caption="üìé Excel –æ—Ç—á–µ—Ç")
                os.remove(filename)
                logger.info("[ALLSTATS] Excel-—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —É–¥–∞–ª—ë–Ω")
            except Exception as e:
                logger.error(f"[ALLSTATS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/—É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Excel-—Ñ–∞–π–ª.")
        else:
            reason_parts = []
            if message.from_user.id != 434791099:
                reason_parts.append(f"user_id ‚â† A ({message.from_user.id})")
            if message.chat.type != "private":
                reason_parts.append(f"chat_type ‚â† private ({message.chat.type})")
            if not all_ticket_rows:
                reason_parts.append("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö (all_ticket_rows –ø—É—Å—Ç)")
            logger.info("[ALLSTATS] Excel-—Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω: " + "; ".join(reason_parts))

        await message.answer(text.strip())

    except Exception as e:
        logger.error(f"[ALLSTATS ERROR] {e}", exc_info=True)
        await message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /allstats.")
