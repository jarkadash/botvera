from pandas.tseries.offsets import DateOffset
import pandas as pd
import os
from aiogram import Bot, types
from aiogram.types import CallbackQuery
from database.db import DataBase  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
from logger import logger

db = DataBase()


def format_processing_time(minutes: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ HH:MM:SS —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º"""
    try:
        if pd.isna(minutes) or minutes < 0:
            return "N/A"

        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª—ã—Ö —Å–µ–∫—É–Ω–¥
        total_seconds = int(round(minutes * 60))

        hours = total_seconds // 3600
        minutes = (total_seconds % 3600) // 60
        seconds = total_seconds % 60

        return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return "N/A"


async def export_data(callback_query: CallbackQuery, bot: Bot):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö.")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        all_data = await db.fetch_all_tables_data()
        if not all_data:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.")
            await callback_query.message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.")
            return

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Excel
        custom_sheet_names = {
            "users": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            "orders": "–¢–∏–∫–µ—Ç—ã",
            "medias": "–ú–µ–¥–∏–∞",
            "history_messages": "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π",
            "banned_users": "–ß–° —Å–ø–∏—Å–æ–∫",
            "services": "–£—Å–ª—É–≥–∏",
            "roles": "–†–æ–ª–∏",
        }

        file_path = "exported_data.xlsx"

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        with pd.ExcelWriter(file_path, engine="openpyxl", mode="w") as writer:
            for table_name, rows in all_data.items():
                if rows:
                    df = pd.DataFrame(rows)
                    sheet_name = custom_sheet_names.get(table_name, table_name)
                    df.to_excel(writer, sheet_name=sheet_name, index=False)
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {sheet_name}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã "orders"
        if "orders" in all_data and all_data["orders"]:
            try:
                df_orders = pd.DataFrame(all_data["orders"])
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_orders)} —Ç–∏–∫–µ—Ç–æ–≤")

                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
                date_cols = ["created_at", "accept_at", "completed_at"]
                df_orders[date_cols] = df_orders[date_cols].apply(lambda col: pd.to_datetime(col, errors='coerce'))

                # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
                df_orders = df_orders.dropna(subset=date_cols)
                df_orders = df_orders[df_orders["completed_at"] > df_orders["accept_at"]]

                # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                df_orders["processing_time"] = (df_orders["completed_at"] - df_orders["accept_at"]).dt.total_seconds() / 60

                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                df_orders = df_orders[
                    (df_orders["support_name"].notna()) &
                    (df_orders["support_name"].astype(str).str.strip().ne("")) &
                    (~df_orders["support_name"].astype(str).str.isdigit())
                ]

                logger.info(f"–í–∞–ª–∏–¥–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {len(df_orders)}")

                # –ü–µ—Ä–∏–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞
                current_date = pd.Timestamp.now()
                current_month = current_date.replace(day=1)
                prev_month = (current_month - DateOffset(months=1)).replace(day=1)

                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É
                date_filter = lambda df, start: df[
                    (df["created_at"].dt.normalize() >= start.normalize())
                    & (df["created_at"].dt.normalize() < (start + DateOffset(months=1)).normalize())
                    ]
                
                print("Min date:", df_orders["created_at"].min())
                print("Max date:", df_orders["created_at"].max())
                print("Current month filter range:", current_month, "to", current_month + DateOffset(months=1))


                df_current = date_filter(df_orders, current_month)
                df_previous = date_filter(df_orders, prev_month)

                # –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                def calculate_stats(df, period_name):
                    if df.empty:
                        logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {period_name}")
                        return pd.DataFrame()

                    try:
                        stats = (
                            df.groupby("support_name", dropna=False)
                            .agg(
                                total_tickets=("id", "size"),
                                avg_processing_minutes=("processing_time", "mean"),
                                avg_stars=("stars", "mean"),
                            )
                            .reset_index()
                            .rename(columns={
                                "support_name": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
                                "total_tickets": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤",
                                "avg_processing_minutes": "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–∏–Ω)",
                                "avg_stars": "–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ ‚≠ê",
                            })
                        )

                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        stats["–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–∏–Ω)"] = stats["–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–∏–Ω)"].apply(
                            lambda x: f"{x:.1f}" if pd.notna(x) else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                        )

                        # –û–∫—Ä—É–≥–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                        stats["–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ ‚≠ê"] = stats["–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ ‚≠ê"].apply(
                            lambda x: f"{x:.1f}" if pd.notna(x) else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
                        )

                        return stats

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
                        return pd.DataFrame()

                # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stats_current = calculate_stats(df_current, "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü")
                stats_previous = calculate_stats(df_previous, "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü")

                # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥ (–∑–∞–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel)
                logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n" + str(stats_current))
                logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü:\n" + str(stats_previous))

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤: {str(e)}")
                raise

            try:
                with pd.ExcelWriter(file_path, engine="openpyxl", mode='a') as writer:
                    if not stats_current.empty:
                        stats_current.to_excel(writer, sheet_name="–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", index=False)
                        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª")

                    if not stats_previous.empty:
                        stats_previous.to_excel(writer, sheet_name="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", index=False)
                        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {str(e)}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        try:
            await bot.send_document(
                chat_id=user_id,
                document=types.FSInputFile(file_path),
                caption="üìä –ü–æ–ª–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n‚ö†Ô∏è –§–∞–π–ª –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç"
            )
            logger.info(f"–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            raise

        finally:
            if os.path.exists(file_path):
                os.remove(file_path)
                logger.info(f"–§–∞–π–ª {file_path} —É–¥–∞–ª–µ–Ω")

        await callback_query.message.answer("‚úÖ –í—ã–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –≤—ã–≥—Ä—É–∑–∫—É")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")