import asyncio

from aiogram import Bot, Router, F
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from sqlalchemy.testing.config import any_async
import html

from sqlalchemy.util import await_fallback

from database.db import DataBase
from colorama import Fore, Style
from logger import logger
from core.dictionary import *
from handlers.Media.Keyboard.inlinekeyboard import *
from config import *
from urllib.parse import urlparse
from more_itertools import chunked

db = DataBase()
media_router = Router()


class MediaAdd(StatesGroup):
    url = State()
    description = State()
    name_cheat = State()


@media_router.message(F.text == 'üì∏ –ú–µ–Ω—é')
async def start_media_menu(message: Message):
    logger.info(Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}, id: {message.from_user.id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "
                            f"media –ú–µ–Ω—é" + Style.RESET_ALL)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    result = await db.check_role(message.from_user.id)

    # –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª–∏, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
    if not result or not hasattr(result, 'role_name'):
        await message.answer('–û—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.')
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å == 'media'
    if result.role_name != 'media':
        await message.answer('–û—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.')
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=media_menu_kb)


@media_router.callback_query(F.data == 'media_add')
async def start_media_add(call: CallbackQuery, state: FSMContext):
    logger.info(Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username}, id: {call.from_user.id} "
                            f"–Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞" + Style.RESET_ALL)

    await call.message.delete()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ:')
    await state.set_state(MediaAdd.url)


from urllib.parse import urlparse


@media_router.message(MediaAdd.url)
async def media_add_url(message: Message, state: FSMContext):
    logger.info(Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}, id: {message.from_user.id} "
                            f"–≤–≤–µ–ª —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ: {message.text}" + Style.RESET_ALL)

    url = message.text
    parsed_url = urlparse(url)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É –∏ —Ö–æ—Å—Ç
    if parsed_url.scheme != 'https':
        await message.answer('–û—à–∏–±–∫–∞! –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª HTTPS.')
        return

    # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allowed_domains = ['www.youtube.com', 'youtube.com', 'youtu.be', 'rutube.ru', 'www.rutube.ru', 'www.youtu.be']

    if parsed_url.netloc not in allowed_domains:
        logger.info(Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}, id: {message.from_user.id} "
                                f"–≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Å—ã–ª–∫—É" + Style.RESET_ALL)
        await message.answer(
            '–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n\n'
            '–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è YouTube/Rutube –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å:\n'
            '- https://www.youtube.com/\n'
            '- https://youtu.be/\n'
            '- https://rutube.ru/\n'
            '- https://www.rutube.ru/'
        )

        return

    await state.update_data(url=url)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –Ω–∞ —é—Ç—É–±–µ(–†—É—Ç—É–±–µ):')
    logger.info(Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}, id: {message.from_user.id} "
                            f"–ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–∏–∫–Ω–µ–π–º" + Style.RESET_ALL)
    await state.set_state(MediaAdd.description)


@media_router.message(MediaAdd.description)
async def media_add_description(message: Message, state: FSMContext):
    logger.info(Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}, id: {message.from_user.id}"
                            f" –≤–≤–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {message.text}" + Style.RESET_ALL)
    description = message.text
    if len(description) > 255:
        await message.answer(f'–û—à–∏–±–∫–∞! –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n\n')
        return
    await state.update_data(description=description)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∏—Ç–∞:')
    await state.set_state(MediaAdd.name_cheat)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞
@media_router.message(MediaAdd.name_cheat)
async def media_add_name_cheat(message: Message, state: FSMContext):
    logger.info(Fore.BLUE + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}, id: {message.from_user.id} "
                            f"–≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∏—Ç–∞: {message.text}" + Style.RESET_ALL)

    name_cheat = message.text
    if len(name_cheat) > 50:
        await message.answer('–û—à–∏–±–∫–∞! –ù–∞–∑–≤–∞–Ω–∏–µ —á–∏—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –û–Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤!\n\n')
        return
    await state.update_data(name_cheat=name_cheat)
    data = await state.get_data()

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≤ –ë–î
    result = await db.media_add(message.from_user.id, data['url'], data['description'], data['name_cheat'])
    if not result:
        await message.answer('–û—à–∏–±–∫–∞! –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ú–µ–¥–∏–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ! –õ–∏–±–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!')

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await db.get_user_all()
    user_id = [user.user_id for user in users]

    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    result = await start_send(message, user_id, data['description'], data['name_cheat'], data['url'])
    if result != True:
        await message.answer('–û—à–∏–±–∫–∞! –ü—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ! –õ–∏–±–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!')

    user_count = get_sent_count()
    sent_count_value, error_count_value = user_count
    logger.info(
        Fore.BLUE + f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count_value} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {error_count_value} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!' + Style.RESET_ALL)
    await message.answer(f'üì∏ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n'
                         f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n'
                         )
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
async def start_send(message: Message, users: list, description: str, name_cheat: str, url: str,
                     batch_size: int = 100, delay: float = 1.5):
    logger.info(Fore.BLUE + "–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É!" + Style.RESET_ALL)

    # –°–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    text_send = (
        f'üì¢ <b>–ù–æ–≤—ã–π –≤–∏–¥–µ–æ –æ–±–∑–æ—Ä —á–∏—Ç–∞: ¬´{name_cheat}¬ª</b> üéÆ\n'
        f'üë§ <i>–ê–≤—Ç–æ—Ä:</i> <b>{description}</b>\n\n'
        f'‚ñ∂Ô∏è <a href="{url}">–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</a>\n\n'
        f'üì° –ë–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–¥–µ—Å—å: @gamebreakernews'
    )
    bot = message.bot
    await bot.send_message(chat_id=GROUP_CHAT_ID, text=text_send)

    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≥—Ä—É–ø–ø—ã
    for batch in chunked(users, batch_size):
        tasks = [send_message(user, text_send, message.bot) for user in batch]
        await asyncio.gather(*tasks)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –≤ –ø–∞—á–∫–µ

        logger.info(Fore.BLUE + f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(batch)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ñ–¥—ë–º {delay} —Å–µ–∫..." + Style.RESET_ALL)
        await asyncio.sleep(delay)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø—ã

    return True


sent_count = 0
error_count = 0


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_message(user_id: int, text: str, bot: Bot):
    global sent_count
    global error_count
    try:
        await bot.send_message(chat_id=user_id, text=text)
        sent_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        logger.info(Fore.BLUE + f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}" + Style.RESET_ALL)
    except TelegramAPIError as e:
        logger.warning(Fore.YELLOW + f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}" + Style.RESET_ALL)
        error_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫


def get_sent_count():
    return sent_count, error_count


@media_router.callback_query(F.data == 'media_statistic')
async def start_media_statistic(call: CallbackQuery):
    logger.info(Fore.BLUE + f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username}, id: {call.from_user.id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '
                            f'media statistic' + Style.RESET_ALL)

    result = await db.check_role(call.from_user.id)
    if not result or not hasattr(result, 'role_name') and result.role_name != 'media':
        await call.message.answer('–û—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.')
        return

    static = await db.get_statistic_media(call.from_user.id)
    if not static:
        await call.message.answer('–û—à–∏–±–∫–∞! –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ! –õ–∏–±–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!')
        return

    count = len(static)

    await call.message.answer(f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏–∞:\n\n'
                              f'–í—Å–µ–≥–æ –≤–∏–¥–µ–æ: {count}')
