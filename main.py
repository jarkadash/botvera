import asyncio
from datetime import datetime

import pytz
import redis.asyncio as redis
import html
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from os import getenv
from aiogram import Bot
from aiogram.types import Message
from aiogram.exceptions import TelegramAPIError, TelegramForbiddenError
from colorama import Fore, Style
from dateutil.parser import parse
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher
from aiogram.client.bot import DefaultBotProperties
from aiogram.fsm.storage.redis import RedisStorage

from config import GROUP_CHAT_ID
from logger import logger
from database.db import DataBase
from handlers.User.Start import start_router
from handlers.Admin.Start import admin_router
from handlers.Worker.Start import worker_router
from handlers.Chat import chat_router
from handlers.Media.Start import media_router
from commands import set_commands
db = DataBase()
load_dotenv()
redis = redis.Redis(
    host=getenv('REDIS_HOST'),
    port=getenv('REDIS_PORT'),
    password=getenv('REDIS_PASSWORD'),  # –°—ã—Ä–æ–π –ø–∞—Ä–æ–ª—å
    username=getenv('REDIS_USER'),
    decode_responses=True,

)
token = getenv('TOKEN')

storage = RedisStorage(redis)
bot = Bot(token=token, default=DefaultBotProperties(parse_mode='HTML'))

dp = Dispatcher(storage=storage)


async def start_up(bot: Bot):
    await bot.send_message(chat_id=434791099, text='–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')

async def stop_up(bot: Bot):
    await bot.send_message(chat_id=434791099, text='–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

dp.startup.register(start_up)
dp.shutdown.register(stop_up)
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp.include_routers(start_router, admin_router, worker_router, media_router, chat_router)

async def start():
    try:
        await start_scheduler(bot)
        await bot.delete_webhook(drop_pending_updates=True)
        await db.create_db()
        await set_commands(bot)
        await dp.start_polling(bot, skip_updates=True)
    finally:
        await bot.session.close()

async def unpin_specific_message(bot: Bot, chat_id: int, message_id: int):
    try:
        await bot.unpin_chat_message(
            chat_id=chat_id,
            message_id=message_id  # –£–∫–∞–∑—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å
        )
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ!")
    except TelegramAPIError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


async def start_check(bot: Bot):
    try:
        result = await db.close_old_orders()
        if not result:  # –ë–æ–ª–µ–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(Fore.BLUE + '–ó–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç' + Style.RESET_ALL)
            return

        for order in result:
            try:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ order_id –¥–ª—è –ª–æ–≥–æ–≤
                order_id = order.get('order_id', 'unknown')
                logger.info(Fore.BLUE + f'–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ {order_id}' + Style.RESET_ALL)

                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ client_id
                client_id = order.get('client_id')
                if not client_id:
                    logger.warning(Fore.YELLOW + f'–ü—Ä–æ–ø—É—Å–∫ –∑–∞–∫–∞–∑–∞ {order_id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç client_id' + Style.RESET_ALL)
                    continue

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–∫–∞–∑–∞
                for message in order.get('messages', []):
                    try:
                        logger.debug(Fore.GREEN + f'–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {order}' + Style.RESET_ALL)
                        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
                        if message.get('client_message_id') and message.get('chat_id'):
                            try:
                                await bot.delete_message(
                                    chat_id=int(message['chat_id']),
                                    message_id=int(message['client_message_id'])
                                )
                                logger.debug(
                                    Fore.GREEN + f'–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message["client_message_id"]}' + Style.RESET_ALL)
                            except Exception as delete_error:
                                logger.error(Fore.RED + f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_error}' + Style.RESET_ALL)

                        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
                        if message.get('support_message_id'):
                            try:
                                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
                                def safe_strftime(dt, default="N/A", fmt='%d-%m-%Y %H:%M'):
                                    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ISO –∏ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
                                    if not dt:
                                        return default

                                    try:
                                        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ - –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                                        if isinstance(dt, str):
                                            try:
                                                dt = parse(dt)  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–∞—Ç
                                            except (ValueError, TypeError):
                                                return default

                                        # –ï—Å–ª–∏ —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
                                        if hasattr(dt, 'strftime'):
                                            return dt.strftime(fmt)

                                        return default
                                    except Exception:
                                        return default

                                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ client_name
                                client_name = html.escape(order.get('client_name', 'N/A'))
                                telegram_link = f'<a href="https://t.me/{client_name}">üîó 1.–¢–µ–ª–µ–≥—Ä–∞–º</a>' if client_name != 'N/A' else ''

                                await bot.edit_message_text(
                                    chat_id=GROUP_CHAT_ID,
                                    message_id=int(message['support_message_id']),
                                    text=(
                                        f"‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç!\n\n"
                                        f"üì© <b>–¢–∏–∫–µ—Ç</b> ‚Ññ{order_id}\n"
                                        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{client_name}\n"
                                        f"üÜî <b>ID:</b> {client_id}\n"
                                        f"{telegram_link}\n"
                                        f"üõ† <b>–£—Å–ª—É–≥–∞:</b> {html.escape(order.get('service_name', 'N/A'))}\n"
                                        f"‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> Closed\n"
                                            f"‚è≥ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {safe_strftime(order.get('created_at'))}\n\n"
                                        f"‚è≥ <b>–ó–∞–∫—Ä—ã—Ç–∞:</b> {safe_strftime(order.get('completed_at'))}\n\n"
                                        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> –ó–∞–∫—Ä—ã—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π (–ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞)\n"
                                    ),
                                    parse_mode="HTML"
                                )

                                # –û—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                                await unpin_specific_message(bot, GROUP_CHAT_ID, int(message['support_message_id']))
                                logger.debug(
                                    Fore.GREEN + f'–û—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message["support_message_id"]}' + Style.RESET_ALL)

                            except Exception as edit_error:
                                logger.error(
                                    Fore.RED + f'–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}' + Style.RESET_ALL)

                    except Exception as msg_error:
                        logger.error(Fore.RED + f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_error}' + Style.RESET_ALL)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
                try:
                    await bot.send_message(
                        chat_id=int(client_id),
                        text=(
                            f"   üè∑ <b>–¢–∏–∫–µ—Ç #{order_id} –∑–∞–∫—Ä—ã—Ç</b>\n"
                            f"‚è≥ –ü—Ä–∏—á–∏–Ω–∞: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ\n\n"
                            f"–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ!\n\n"
                            f"–° —É–≤–∞–∂–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è üë®‚Äçüíª"
                            f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
                        ),
                        parse_mode="HTML"
                    )
                    logger.debug(Fore.GREEN + f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {client_id}' + Style.RESET_ALL)
                except TelegramForbiddenError as notify_error:
                    logger.error(Fore.RED + f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notify_error}' + Style.RESET_ALL)

            except Exception as order_error:
                logger.error(Fore.RED + f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {order_error}' + Style.RESET_ALL)
                continue

    except Exception as main_error:
        error_msg = f'–û—à–∏–±–∫–∞ –≤ start_check: {str(main_error)}'
        logger.critical(Fore.MAGENTA + error_msg + Style.RESET_ALL)
        await bot.send_message(
            chat_id=434791099,
            text=f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {error_msg}"
        )


async def start_scheduler(bot: Bot):
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    scheduler = AsyncIOScheduler(timezone=pytz.timezone('Europe/Moscow'))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø–æ–º–µ–Ω—è–π—Ç–µ –Ω–∞ hour=0)
    scheduler.add_job(
        start_check,
        'cron',
        hour=0,  # —Å—Ç—Ä–æ–≥–æ –ø–æ–ª–Ω–æ—á—å
        minute=20,  # 00 –º–∏–Ω—É—Ç
        args=(bot,)
    )

    scheduler.start()
    logger.info(Fore.GREEN +"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –∫–∞–∂–¥—ã–µ 00:20 –º–∏–Ω—É—Ç" + Style.RESET_ALL)

if __name__ == '__main__':
    asyncio.run(start())